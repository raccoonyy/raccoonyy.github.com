<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Django 1.11 - raccoony's cave</title><description>Raccoony writes about programming, book and etc.</description><link>http://raccoonyy.github.io/</link><image><url>http://raccoonyy.github.io/favicon.png</url><title>Django 1.11 - raccoony's cave</title><link>http://raccoonyy.github.io/</link></image><generator>Ghost 2.19</generator><lastBuildDate>Tue, 09 Apr 2019 21:39:42 GMT</lastBuildDate><atom:link href="http://raccoonyy.github.io/tag/django-1-11/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Django 1.11 릴리스와 주요 변경 사항</title><description>&lt;p&gt;사진 출처: &lt;a href="https://www.flickr.com/photos/28744631@N06/8593971219/"&gt;Pinkie Pie by Daniel Chang&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django 1.11이 드디어 출시되었습니다. 1.x에서는 마지막 버전인데요. 이 글에서는 Django 1.11에 추가된 기능과 바뀐점을 간략하게 알아보려 합니다. &lt;a href="https://docs.djangoproject.com/en/stable/releases/1.11/"&gt;Django 공식 릴리스 노트&lt;/a&gt;를 참고하였습니다. &lt;strong&gt;주의! 릴리스 노트를 모두 번역하지는 않았습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;하위 버전들의 보안 업데이트도 함께 올라왔습니다. &lt;a href="https://docs.djangoproject.com/en/dev/releases/1.10.7/"&gt;1.10.7&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/dev/releases/1.9.13/"&gt;1.9.&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description><link>http://raccoonyy.github.io/django-1-11-release-note-summary-korean/</link><guid isPermaLink="false">59815cfcdd47a80001bb9f0e</guid><category>Django</category><category>1.11</category><category>Django 1.11</category><category>릴리스 노트</category><dc:creator>raccoony</dc:creator><pubDate>Tue, 04 Apr 2017 23:20:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2017/04/django-1.11-pony.png" medium="image"/><content:encoded>&lt;img src="http://raccoonyy.github.io/content/images/2017/04/django-1.11-pony.png" alt="Django 1.11 릴리스와 주요 변경 사항"&gt;&lt;p&gt;사진 출처: &lt;a href="https://www.flickr.com/photos/28744631@N06/8593971219/"&gt;Pinkie Pie by Daniel Chang&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django 1.11이 드디어 출시되었습니다. 1.x에서는 마지막 버전인데요. 이 글에서는 Django 1.11에 추가된 기능과 바뀐점을 간략하게 알아보려 합니다. &lt;a href="https://docs.djangoproject.com/en/stable/releases/1.11/"&gt;Django 공식 릴리스 노트&lt;/a&gt;를 참고하였습니다. &lt;strong&gt;주의! 릴리스 노트를 모두 번역하지는 않았습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;하위 버전들의 보안 업데이트도 함께 올라왔습니다. &lt;a href="https://docs.djangoproject.com/en/dev/releases/1.10.7/"&gt;1.10.7&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/dev/releases/1.9.13/"&gt;1.9.13&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/dev/releases/1.8.18/"&gt;1.8.18&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2017-05-11 수정 내역&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/raccoonyy/raccoonyy.github.com/issues/1"&gt;shlee322 님의 제보&lt;/a&gt;로 include 태그와 관련된 내용을 수정하였습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=""&gt;파이썬 호환성&lt;/h1&gt;
&lt;p&gt;Django 1.11은 파이썬 &lt;strong&gt;2.7, 3.4, 3.5, 3.6에서 작동&lt;/strong&gt;합니다. 3.6을 지원하는 첫 Django 버전입니다. 각 버전별 마지막 릴리스를 사용하기를 추천합니다.&lt;/p&gt;
&lt;p&gt;Django 1.11.x는 파이썬 2를 지원하는 마지막 버전입니다. 다음 번 메이저 릴리스인 &lt;strong&gt;Django 2.0부터는 파이썬 3.5 이상만 지원&lt;/strong&gt;할 예정입니다.&lt;/p&gt;
&lt;h1 id=""&gt;새 기능&lt;/h1&gt;
&lt;h3 id="index"&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/indexes/#module-django.db.models.indexes"&gt;Index 클래스&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/topics/db/models/#meta-options"&gt;Meta 클래스&lt;/a&gt;의 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/options/#django.db.models.Options.indexes"&gt;indexes 항목에서 인덱스할 필드를 지정&lt;/a&gt;할 수 있고, 이를 위한 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/indexes/"&gt;Index 클래스&lt;/a&gt;도 추가되었습니다.&lt;/p&gt;
&lt;h3 id=""&gt;템플릿 기반의 폼 위젯 렌더링&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/forms/renderers/"&gt;폼 렌더링 API가 추가&lt;/a&gt;되었고, 이를 활용하여 특정 폼 위젯을 커스터마이징할 수 있습니다.&lt;/p&gt;
&lt;h3 id=""&gt;하위 쿼리 표현식&lt;/h3&gt;
&lt;p&gt;쿼리 결과를 다른 쿼리에서 참조할 수 있는 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/expressions/#subquery-expressions"&gt;Subquery 표현식&lt;/a&gt;과 쿼리 결과가 존재할 때만 실행할 수 있는 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/expressions/#django.db.models.Exists"&gt;Exists 표현식&lt;/a&gt;이 추가되었습니다.&lt;/p&gt;
&lt;h3 id=""&gt;자잘하게 추가된 기능&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/settings/#std:setting-CSRF_USE_SESSIONS"&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;을 설정&lt;/a&gt;하여 CSRF 토큰을 쿠키가 아닌 세션에 저장할 수 있습니다(기본 값은 False).&lt;/li&gt;
&lt;li&gt;PostgreSQL 하에서 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.iterator"&gt;&lt;code&gt;QuerySet.iterator()&lt;/code&gt; 메서드&lt;/a&gt;가 &lt;a href="http://initd.org/psycopg/docs/usage.html#server-side-cursors"&gt;서버 측 커서&lt;/a&gt;를 사용하여 서버의 메모리 부담을 데이터베이스 메모리로 돌릴 수 있습니다.&lt;/li&gt;
&lt;li&gt;Form에서 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/forms/api/#django.forms.Form.get_initial_for_field"&gt;&lt;code&gt;get_initial_for_field()&lt;/code&gt; 메서드&lt;/a&gt;를 사용하여, 필드의 초기 값을 지정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;loaddata 명령에 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/django-admin/#cmdoption-loaddata-exclude"&gt;--exclude 옵션이 추가&lt;/a&gt;되었습니다. 특정 모델이나 앱을 제외하고 픽스처 데이터를 불러올 수 있습니다.&lt;/li&gt;
&lt;li&gt;showmigrations 명령에서 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/django-admin/#cmdoption-showmigrations-plan"&gt;--plan 옵션&lt;/a&gt;을 사용할 때도 app_label을 지정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.get_or_create"&gt;&lt;code&gt;get_or_create()&lt;/code&gt; 메서드&lt;/a&gt;와 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.update_or_create"&gt;&lt;code&gt;update_or_create()&lt;/code&gt; 메서드&lt;/a&gt;에서 &lt;code&gt;defaults&lt;/code&gt;의 값으로 함수 값(callable value)을 지정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/database-functions/#django.db.models.functions.datetime.Trunc"&gt;DateTime이나 TimeField에 대해 Trunc 클래스를 적용&lt;/a&gt;하면, 특정 부분 이하를 자를 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 월 단위
2017-02-28 20:11:24.021458+09:00 =&amp;gt; 2017-01-01 00:00:00.000000+09:00

# 일 단위
2017-02-28 20:11:24.021458+09:00 =&amp;gt; 2017-02-01 00:00:00.000000+09:00

# 시 단위
2017-02-28 20:11:24.021458+09:00 =&amp;gt; 2017-02-28 00:00:00.000000+09:00
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;쿼리셋의 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.values"&gt;&lt;code&gt;values()&lt;/code&gt; 메서드&lt;/a&gt;와 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.values_list"&gt;&lt;code&gt;values_list()&lt;/code&gt; 메서드&lt;/a&gt;에서도 표현식을 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;쿼리 표현식에서 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/expressions/#django.db.models.Expression.asc"&gt;정렬시 null 값을 앞에 오거나 뒤에 오도록 지정&lt;/a&gt;할 수 있습니다.&lt;/li&gt;
&lt;li&gt;두 쿼리셋의 교집합과 합집합, 차집합을 만들 수 있는 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.union"&gt;&lt;code&gt;union()&lt;/code&gt; 메서드&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.intersection"&gt;&lt;code&gt;intersection()&lt;/code&gt; 메서드&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.difference"&gt;&lt;code&gt;difference()&lt;/code&gt; 메서드&lt;/a&gt;가 추가되었습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=""&gt;바뀐 점&lt;/h1&gt;
&lt;h3 id="collectstatic"&gt;collectstatic 실행시 파일 간 순환 참조가 존재하면 오류 발생&lt;/h3&gt;
&lt;p&gt;해시 값이 붙은 정적 파일 저장소를 사용하고 있을 때,&lt;br&gt;
&lt;code&gt;a.css&lt;/code&gt;에서 &lt;code&gt;b.css&lt;/code&gt;를 참조하고 &lt;code&gt;b.css&lt;/code&gt;에서도 &lt;code&gt;a.css&lt;/code&gt;를 참조한다면 collectstatic 명령이 실패합니다.&lt;/p&gt;
&lt;h3 id="datetimefield"&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.DateTimeField"&gt;DateTimeField&lt;/a&gt;에 대해 상세 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#date"&gt;룩업&lt;/a&gt; 지원&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.DateField"&gt;DateField&lt;/a&gt;에 대해 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#week"&gt;week&lt;/a&gt; 룩업을 지원합니다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.DateTimeField"&gt;DateTimeField&lt;/a&gt;에 대해 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#time"&gt;time&lt;/a&gt; 룩업을 지원합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_TZ&lt;/code&gt; 옵션이 &lt;code&gt;True&lt;/code&gt;라면 필드의 값이 현지 시각으로 바뀌어 리턴됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="postgresql92postgis20"&gt;PostgreSQL 9.2와 PostGIS 2.0 지원 중단&lt;/h3&gt;
&lt;p&gt;PostgreSQL 9.2의 지원이 2017년 9월에 끝남에 따라, Django 1.11에서는 &lt;strong&gt;PostgreSQL 9.3을 최소 지원 버전으로 지정&lt;/strong&gt;하였습니다.&lt;/p&gt;
&lt;h3 id="liveservertestcase0"&gt;LiveServerTestCase가 포트 0에 바인드&lt;/h3&gt;
&lt;p&gt;아울러 &lt;code&gt;DJANGO_LIVE_TEST_SERVER_ADDRESS&lt;/code&gt; 옵션이 사라지고, &lt;code&gt;manage.py test&lt;/code&gt; 명령에 &lt;code&gt;--liveserver&lt;/code&gt; 옵션도 삭제되었습니다.&lt;/p&gt;
&lt;h3 id="get_or_createupdate_or_create"&gt;&lt;code&gt;get_or_create()&lt;/code&gt;와 &lt;code&gt;update_or_create()&lt;/code&gt;에서 변수명 검사&lt;/h3&gt;
&lt;p&gt;모델에 없는 필드를 지정할 경우 오류가 발생합니다. (이전에는 그냥 무시했기 때문에, 타이핑 실수를 찾기가 어려웠죠.)&lt;/p&gt;
&lt;h3 id="pytztime_zonenone"&gt;pytz 패키지 의존성이 추가되었고, &lt;code&gt;TIME_ZONE = None&lt;/code&gt; 옵션이 사라집니다.&lt;/h3&gt;
&lt;p&gt;자동으로 타임존을 설정할 때는 settings 파일에 &lt;code&gt;TIME_ZONE = None&lt;/code&gt; 대신 다음처럼 하세요.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from tzlocal import get_localzone

TIME_ZONE = get_localzone().zone
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=""&gt;사소한 변경&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;테스트를 실행할 때도 &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;를 검사합니다. 테스트용 호스트 이름을 사용하고 있다면 이 이름을 &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;에도 넣어야 합니다.&lt;/li&gt;
&lt;li&gt;모델 폼에서 CharField가 null=True인 경우, 빈 문자열 대신 NULL을 저장합니다.&lt;/li&gt;
&lt;li&gt;체크박스와 셀렉트박스 폼을 렌더링할 때 &lt;code&gt;checked='checked'&lt;/code&gt;, &lt;code&gt;selected='selected'&lt;/code&gt; 대신 &lt;code&gt;checked&lt;/code&gt;, &lt;code&gt;selected&lt;/code&gt;만 넣습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=""&gt;삭제된 기능&lt;/h1&gt;
&lt;h3 id="modelspermalink"&gt;models.permalink 데코레이터&lt;/h3&gt;
&lt;p&gt;대신 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/urlresolvers/#django.urls.reverse"&gt;&lt;code&gt;django.urls.reverse()&lt;/code&gt;&lt;/a&gt;를 사용해야 합니다.&lt;/p&gt;
&lt;h3 id="contribauth"&gt;contrib.auth의 각종 함수 기반 뷰&lt;/h3&gt;
&lt;p&gt;인증과 관련된 함수 기반 뷰들이 클래스 기반 뷰로 바뀌었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;login()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.LoginView"&gt;LoginView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logout()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.LogoutView"&gt;LogoutView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_change()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordChangeView"&gt;PasswordChangeView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_change_done()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordChangeDoneView"&gt;PasswordChangeDoneView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_reset()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordResetView"&gt;PasswordResetView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_reset_done()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordResetDoneView"&gt;PasswordResetDoneView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_reset_confirm()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordResetConfirmView"&gt;PasswordResetConfirmView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_reset_complete()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordResetCompleteView"&gt;PasswordResetCompleteView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="include"&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordResetCompleteView"&gt;&lt;code&gt;{% include %}&lt;/code&gt; 탬플릿 태그&lt;/a&gt; 렌더링시 예외를 발생시키지 않았던 부분&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/templates/builtins/#std:templatetag-include"&gt;include&lt;/a&gt; 태그를 렌더링하는 동안 예외가 발생하면 조용히 넘어갔는데, 이것이 꽤나 혼란을 주었나 봅니다. Django 2.1부터는 include 태그를 사용했을 때 예외가 발생합니다.&lt;/p&gt;
</content:encoded></item></channel></rss></html>