<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>django-environ - raccoony's cave</title><description>Raccoony writes about programming, book and etc.</description><link>http://raccoonyy.github.io/</link><image><url>http://raccoonyy.github.io/favicon.png</url><title>django-environ - raccoony's cave</title><link>http://raccoonyy.github.io/</link></image><generator>Ghost 2.19</generator><lastBuildDate>Tue, 09 Apr 2019 21:39:53 GMT</lastBuildDate><atom:link href="http://raccoonyy.github.io/tag/django-environ/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>[RFDP] django-environ</title><description>컨테이너 환경을 사용한 배포시 환경변수 관리의 불편함을 덜어주는 플러그인입니다.</description><link>http://raccoonyy.github.io/django-environ/</link><guid isPermaLink="false">59815cfcdd47a80001bb9ee2</guid><category>Django</category><category>django-environ</category><category>환경변수</category><category>ECS</category><dc:creator>raccoony</dc:creator><pubDate>Thu, 16 Jun 2016 23:11:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" medium="image"/><content:encoded>&lt;blockquote&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" alt="[RFDP] django-environ"&gt;&lt;p&gt;RFDP : Raccoony's Favorite Django Plugins&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;플러그인 이름 : django-environ&lt;/p&gt;
&lt;p&gt;저장소 : &lt;a href="https://github.com/joke2k/django-environ"&gt;https://github.com/joke2k/django-environ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;공식 문서 : &lt;a href="http://django-environ.readthedocs.org/"&gt;http://django-environ.readthedocs.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=""&gt;쓰임새&lt;/h2&gt;
&lt;p&gt;배포 과정에서 Docker 등의 컨테이너 환경을 도입했다면 환경변수를 통해 각종 설정값을 관리할 텐데요. 데이터베이스 하나 설정하는 데만도 대여섯 개의 값이 필요한 상황이 불편하기도 하고, 환경변수마다 매번 &lt;code&gt;os.environ.get&lt;/code&gt;을 입력하기도 귀찮고, 또 개발 환경을 설정하기 위해 &lt;code&gt;export&lt;/code&gt;를 해줘야 하는 상황도 귀찮죠.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;django-environ&lt;/strong&gt; 패키지는 이러한 불편함을 덜어 줍니다.&lt;/p&gt;
&lt;h2 id=""&gt;설치&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install django-environ
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;적용하기&lt;/h2&gt;
&lt;h4 id="1settingspyenv"&gt;1. 먼저 &lt;code&gt;settings.py&lt;/code&gt;에서 빼내고 싶은 환경변수들을 &lt;code&gt;.env&lt;/code&gt; 파일에 모아두세요.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# .env
DEBUG=on
DATABASE_URL=mysql://db_user_id:db_user_password@db_host_address:db_host_port/db_name
SECRET_KEY=...

MY_ENV_VALUE=...
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="2settingspy"&gt;2. 그 다음에 &lt;code&gt;settings.py&lt;/code&gt; 파일을 수정합니다.&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# settings.py

import environ
root = environ.Path(__file__) - 3 # three folder back (/a/b/c/ - 3 = /)
env = environ.Env(DEBUG=(bool, False),) # 기본 값
environ.Env.read_env() # .env 파일이 있으면 읽음

SITE_ROOT = root()

DEBUG = env('DEBUG') # 환경변수에 DEBUG값이 없으면 False로 설정됨
TEMPLATE_DEBUG = DEBUG

DATABASES = {
    'default': env.db(), # DATABASE_URL이 환경변수에 없으면 ImproperlyConfigured 예외 던짐
}

public_root = root.path('public/')

MEDIA_ROOT = public_root('media')
MEDIA_URL = 'media/'
STATIC_ROOT = public_root('static')
STATIC_URL = 'static/'

SECRET_KEY = env('SECRET_KEY') # SECRET_KEY가 환경변수에 없으면 ImproperlyConfigured 예외 던짐

MY_ENV_VALUE = env('MY_ENV_VALUE', default='test_value') # MY_ENV_VALUE가 환경변수에 없으면 test_value로 설정됨
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="3"&gt;3. 마지막으로 배포 환경용 설정값을 컨테이너에 주입합니다.&lt;/h4&gt;
&lt;p&gt;저는 AWS의 ECS 서비스를 사용하고 있으므로 Task Definition에 넣어주었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://raccoonyy.github.io/content/images/2016/06/aws_task_definition.jpg" alt="[RFDP] django-environ"&gt;&lt;/p&gt;
&lt;p&gt;자세한 사항은 &lt;a href="http://django-environ.readthedocs.org/"&gt;공식 문서&lt;/a&gt;를 참고하세요.&lt;/p&gt;
</content:encoded></item></channel></rss></html>