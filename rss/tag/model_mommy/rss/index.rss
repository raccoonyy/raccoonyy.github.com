<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>model_mommy - raccoony's cave</title><description>Raccoony writes about programming, book and etc.</description><link>http://raccoonyy.github.io/</link><image><url>http://raccoonyy.github.io/favicon.png</url><title>model_mommy - raccoony's cave</title><link>http://raccoonyy.github.io/</link></image><generator>Ghost 2.19</generator><lastBuildDate>Tue, 09 Apr 2019 21:39:31 GMT</lastBuildDate><atom:link href="http://raccoonyy.github.io/tag/model_mommy/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>테스트용 객체 생성을 편하게 - model_mommy</title><description>django에서 테스트용 객체를 생성하기가 좀 귀찮았다. 테스트 픽스처를 만들기도 귀찮았다. 그냥 더미 객체들 좀 알아서 만들어주면 안 되나? model_mommy 도입으로 해결!</description><link>http://raccoonyy.github.io/generating-dynamic-test-fixture-with-model_mommy/</link><guid isPermaLink="false">59815cfbdd47a80001bb9ea8</guid><category>test</category><category>파이썬</category><category>Django</category><category>django-test</category><category>model_mommy</category><category>테스트</category><dc:creator>raccoony</dc:creator><pubDate>Tue, 26 Jan 2016 23:21:53 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2016/01/model_mommy.jpg" medium="image"/><content:encoded>&lt;img src="http://raccoonyy.github.io/content/images/2016/01/model_mommy.jpg" alt="테스트용 객체 생성을 편하게 - model_mommy"&gt;&lt;p&gt;개인적으로 테스트를 작성하면서 귀찮다고 여겼던 부분 중 하나는 테스트용 데이터(테스트 픽스처) 구축이었다. Django에서 테스트 전에 테스트 픽스처를 불러들이는 기능을 제공하지만, 이걸 만드는 일 자체가 귀찮기도 하고 어떤 데이터인지 확인하려면 json 파일을 열어봐야 하니까.&lt;/p&gt;
&lt;p&gt;그러던 중에 &lt;strong&gt;Object Factory&lt;/strong&gt;라는 도구를 알게 되었다. 여러 가지가 있지만(대표적으론 &lt;a href="https://factoryboy.readthedocs.org/en/latest/"&gt;Factory Boy&lt;/a&gt;) 가장 간단해서 사용하게 된 &lt;a href="http://model-mommy.readthedocs.org/"&gt;model_mommy&lt;/a&gt;를 소개해볼까 한다.&lt;/p&gt;
&lt;h2 id=""&gt;설치&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ pip install model_mommy
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;테스트용 객체 만들기&lt;/h2&gt;
&lt;p&gt;다음과 같은 Author 모델이 있다고 하자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# models.py
class Author(models.Model):
    name = models.CharField(max_length=35)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 model_mommy를 사용하여 테스트용 객체를 만들 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# test_models.py
from django.test import TestCase
from model_mommy import mommy

class TestAuthor(TestCase):
    def setUp(self):
        self.author = mommy.make('Author')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이때 Author 모델의 name 속성은 임의의 글자 35개(&lt;code&gt;max_length=35&lt;/code&gt;)로 생성되는데, 이를 직접 지정할 수도 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;self.author = mommy.make(
    'Author', 
    name='test_name'
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;외부키 연결&lt;/h2&gt;
&lt;p&gt;이제 &lt;code&gt;models.py&lt;/code&gt;에 Book 모델을 추가하고, Author 모델과 연결했다고 하자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# models.py
class Book(models.Model):
    title = models.CharField(max_length=150)
    author = models.ForeignKey('Author')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 테스트에서 특정 Author 객체와 연결된 Book 모델을 만들고 싶다면,&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# test_models.py
# ... (생략) ...
class TestBook(TestCase):
    def setUp(self):
        self.author = mommy.make('Author')
        self.book = mommy.make('Book', author=self.author)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;연결된 모델의 속성도 지정할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;self.book = mommy.make(
    'Book',
    author__name='test_related_name'
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=""&gt;한꺼번에 여러 객체 만들기&lt;/h3&gt;
&lt;p&gt;객체를 한꺼번에 하나 이상 만들고 싶다면,&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;books = mommy.make(
    'Book',
    _quantity=100
)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;너무 많이 만들면(10,000개 이상?) 테스트 실행 시간도 늘어난다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 외에도 &lt;a href="http://model-mommy.readthedocs.org/en/latest/recipes.html"&gt;Recipe&lt;/a&gt;를 만들어 두고 재활용하거나, 만드는 순서에 따라 번호를 매기는 &lt;a href="http://model-mommy.readthedocs.org/en/latest/recipes.html#sequences-in-recipes"&gt;Sequence&lt;/a&gt; 등의 기능도 있으니 참고하길.&lt;/p&gt;
</content:encoded></item></channel></rss></html>