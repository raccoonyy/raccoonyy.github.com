<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>pytest - raccoony's cave</title><description>Raccoony writes about programming, book and etc.</description><link>http://raccoonyy.github.io/</link><image><url>http://raccoonyy.github.io/favicon.png</url><title>pytest - raccoony's cave</title><link>http://raccoonyy.github.io/</link></image><generator>Ghost 2.19</generator><lastBuildDate>Tue, 09 Apr 2019 21:39:45 GMT</lastBuildDate><atom:link href="http://raccoonyy.github.io/tag/pytest/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>한국의 파이썬 소식(2017년 1월 셋째 주)</title><description>한국에서 일어나는 파이썬 관련 소식을 전합니다. #1 Circle CI에서 Python 3.6 사용하기 #2 2017 DjangoGirlsSeoul 새 운영진 선출 #3 박근핵닷컴 서버 개발 일지 #4 Flask에서 pytest 환경 설정 #5 부동 소수점 오차 해결법 외</description><link>http://raccoonyy.github.io/python-news-for-korean-2017-3rd-week-jan/</link><guid isPermaLink="false">59815cfcdd47a80001bb9f0c</guid><category>파이썬 소식</category><category>python-news</category><category>Circle CI</category><category>Django Girls Seoul</category><category>Flask</category><category>pytest</category><category>부동 소수점 오차</category><category>XBRAIN</category><category>박근핵닷컴</category><category>개발일지</category><dc:creator>raccoony</dc:creator><pubDate>Mon, 16 Jan 2017 23:13:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2017/01/python-news-for-korean-cover-2017.jpg" medium="image"/><content:encoded>&lt;blockquote&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2017/01/python-news-for-korean-cover-2017.jpg" alt="한국의 파이썬 소식(2017년 1월 셋째 주)"&gt;&lt;p&gt;한국에서 일어나는 파이썬 관련 소식을 전합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=""&gt;블로그&lt;/h1&gt;
&lt;h3 id="circlecipython360bytwpower"&gt;&lt;a href="https://twpower.github.io/circle/ci/2017/01/13/6.html"&gt;Circle CI에서 Python 3.6.0을 사용하는 법&lt;/a&gt; by TWpower님&lt;/h3&gt;
&lt;p&gt;Circle CI에서 Python 3.6.0을 사용할 수 없는 문제에 대처하는 방법을 TWpower님이 알려줍니다.&lt;/p&gt;
&lt;h3 id="2017djangogirlsseoulneworganizerbydjangogirlsseoul"&gt;&lt;a href="https://medium.com/djangogirlsseoul-codecamp/2017%EB%85%84-djangogirls-seoul-new-organizer%EB%A5%BC-%EC%86%8C%EA%B0%9C-%ED%95%A9%EB%8B%88%EB%8B%A4-2ebd4988859b#.lpowgfrao"&gt;2017년 DjangoGirls Seoul New Organizer를 소개 합니다&lt;/a&gt; by Django Girls Seoul&lt;/h3&gt;
&lt;p&gt;Django Girls Seoul을 꾸려갈 새 운영진을 소개합니다.&lt;/p&gt;
&lt;h3 id="by"&gt;&lt;a href="https://medium.com/@parkgeunhack/%EC%95%8C%EB%A0%89%EC%8A%A4%EC%9D%98-%EC%9D%B4%EC%95%BC%EA%B8%B0-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%84%9C%EB%B2%84-%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80-c3aa12baaa75#.eley1a6k3"&gt;박근핵닷컴 알렉스의 이야기 - 그리고 서버 개발 일지&lt;/a&gt; by 알렉스님&lt;/h3&gt;
&lt;p&gt;구글 앱 엔진과 Flask로 구성한 서버 개발과 동시 접속자 폭증에 대응한 이야기를 알렉스님이 정리하였습니다.&lt;/p&gt;
&lt;h3 id="flaskpytestbyqodot"&gt;&lt;a href="https://qodot.github.io/Flask%EC%97%90%EC%84%9C-Pytest-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0.html"&gt;Flask에서 pytest 환경 설정하기&lt;/a&gt; by qodot님&lt;/h3&gt;
&lt;p&gt;Flask에서 pytest의 fixture로 테스트 환경을 구축하는 방법을 qodot님이 설명합니다.&lt;/p&gt;
&lt;h3 id="bywinterj"&gt;&lt;a href="http://winterj.me/Floating-Point/"&gt;파이썬에서 부동 소수점 오차 해결하기&lt;/a&gt; by WinterJ님&lt;/h3&gt;
&lt;p&gt;실수를 비교할 때 기대와 다르게 작동하는 경우들을 해결하는 네 가지 방법을 WinterJ님이 정리하였습니다.&lt;/p&gt;
&lt;h3 id="tracemallocby"&gt;&lt;a href="http://brownbears.tistory.com/249"&gt;tracemalloc으로 메모리 누수 현상 파악하기&lt;/a&gt; by 불곰님&lt;/h3&gt;
&lt;p&gt;파이썬 3.4부터 내장된 &lt;code&gt;tracemalloc&lt;/code&gt; 모듈을 사용하여 메모리 누수 현상을 추적하는 방법을 불곰님이 설명합니다.&lt;/p&gt;
&lt;h3 id="hackercup2017by"&gt;&lt;a href="https://medium.com/@eunsollee/hacker-cup-2017-round-1-%EA%B0%84%EB%8B%A8-%ED%9B%84%EA%B8%B0-6e90751d321f#.9uuflbuzi"&gt;Hacker Cup 2017 후기&lt;/a&gt; by 이은솔 님&lt;/h3&gt;
&lt;p&gt;페이스북 해커 컵 2017에 참가한 이은솔 님이 문제와 풀이(파이썬 코드)를 공개하였습니다.&lt;/p&gt;
&lt;h1 id=""&gt;구인&lt;/h1&gt;
&lt;h3 id="xbrain"&gt;&lt;a href="https://docs.google.com/document/d/1YcFXBwoewI09060anzRsAIK3Mb5TS5tYSV8Mn23A1js/edit#bookmark=id.4osf2ojnym5u"&gt;XBRAIN 소프트웨어 엔지니어&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;머신러닝 소프트웨어인 앨리스(Alice)라는 웹 애플리케이션을 만드는 XBRAIN에서 서버 API와 웹 인터페이스를 구축할 파이썬/Django 개발자를 모집합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Disqus 댓글을 다시 살렸습니다.&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item><item><title>한국의 파이썬 소식(4월 넷째 주)</title><description>한국에서 일어나는 파이썬 관련 소식을 전합니다. #1 파이콘 2016이 열립니다 #2 Sphinx를 사용한 파이썬 소스코드 문서화 기법 #3 pytest를 이용한 Django 테스트 속도 향상 #4 (신간) 파이썬 라이브러리 레시피 #5 (신간) 고성능 파이썬 프로그래밍</description><link>http://raccoonyy.github.io/python-news-for-korean-week-april/</link><guid isPermaLink="false">59815cfcdd47a80001bb9ed7</guid><category>파이썬</category><category>파이썬 소식</category><category>python</category><category>python-news</category><category>pycon2016</category><category>pycon apac</category><category>Django</category><category>pytest</category><category>파이썬 소스코드 문서화</category><category>Sphinx</category><category>파이썬 라이브러리 레시피</category><category>고성능 파이썬 프로그래밍</category><category>장고 강좌</category><category>파이썬 강좌</category><dc:creator>raccoony</dc:creator><pubDate>Mon, 25 Apr 2016 02:50:23 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2016/01/IMG_0005.jpg" medium="image"/><content:encoded>&lt;blockquote&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2016/01/IMG_0005.jpg" alt="한국의 파이썬 소식(4월 넷째 주)"&gt;&lt;p&gt;한국에서 일어나는 파이썬 관련 소식을 전합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=""&gt;행사&lt;/h1&gt;
&lt;h3 id="pycon2016"&gt;&lt;a href="https://www.pycon.kr/2016apac/"&gt;PyCon 2016&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;2016년에도 파이콘이 열립니다. 이번에는 특별히 아시아태평양 지역 전체를 포괄한다고 하네요. 얼리버드 등록은 눈 깜짝할 새에 지나갔으니, 정규 등록을 기다리셔야 할 듯 합니다.&lt;/p&gt;
&lt;h1 id=""&gt;오프라인 강좌&lt;/h1&gt;
&lt;h3 id=""&gt;&lt;a href="https://festi.kr/class/django/"&gt;장고 차근차근 시작하기&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;6월 7일 개강 | 4주 간 36시간 과정(화, 목, 일) | 수강료 60만원&lt;/p&gt;
&lt;h3 id=""&gt;&lt;a href="https://festi.kr/class/python/"&gt;파이썬 차근차근 시작하기&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;6월 4일 개강 | 2일 간 12시간 과정(토, 일) | 수강료 20만원&lt;/p&gt;
&lt;h3 id=""&gt;&lt;/h3&gt;
&lt;h1 id=""&gt;블로그&lt;/h1&gt;
&lt;h3 id="bykeichoi"&gt;&lt;a href="http://www.hanul93.com/python-sphinx/"&gt;파이썬 소스코드 문서화&lt;/a&gt; by Kei Choi님&lt;/h3&gt;
&lt;p&gt;sphinx를 이용한 소스코드 문서화 기법을 Kei Choi님이 작성하였습니다.&lt;/p&gt;
&lt;h3 id="djangotestbyperhapsspy"&gt;&lt;a href="https://gist.github.com/perhapsspy/fc5521376df87036be2d034d1beaf69b"&gt;Django에서 Test 쉽고 빠르게 하기&lt;/a&gt; by Perhapsspy&lt;/h3&gt;
&lt;p&gt;pytest를 이용하여 Django 테스트 실행 속도를 빠르게 하는 방법을 Perhapsspy님이 작성하였습니다.&lt;/p&gt;
&lt;h1 id=""&gt;책&lt;/h1&gt;
&lt;h3 id="by"&gt;&lt;a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=81952685"&gt;파이썬 라이브러리 레시피&lt;/a&gt; by 프리렉&lt;/h3&gt;
&lt;p&gt;&lt;img src="http://image.aladin.co.kr/product/8195/26/letslook/8965401267_f.jpg" alt="한국의 파이썬 소식(4월 넷째 주)"&gt;&lt;/p&gt;
&lt;h3 id="by"&gt;&lt;a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=82059410"&gt;고성능 파이썬 프로그래밍&lt;/a&gt; by 에이콘출판&lt;/h3&gt;
&lt;p&gt;&lt;img src="http://image.aladin.co.kr/product/8205/94/letslook/8960778532_f.jpg" alt="한국의 파이썬 소식(4월 넷째 주)"&gt;&lt;/p&gt;
</content:encoded></item><item><title>django 테스트를 pytest로 실행시키기</title><description>&lt;p&gt;버전 1.7부터 django에서 기본으로 제공하는 테스트 러너가 마이그레이션 과정을 거치기 시작했다. 당연히 테스트 과정에 드는 시간은 늘어났고. 1.8에서는 &lt;code&gt;--keepdb&lt;/code&gt;라는 옵션을 &lt;a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-option---keepdb"&gt;제공&lt;/a&gt;하여 마이그레이션을 회피할 수 있는 듯 하다. 1.7에서도 작동하는 우회법(&lt;a href="https://pypi.python.org/pypi/django-test-without-migrations"&gt;1&lt;/a&gt;, &lt;a href="https://gist.github.com/nealtodd/2869341f38f5b1eeb86d"&gt;2&lt;/a&gt;)들도 존재한다.&lt;/p&gt;
&lt;p&gt;하지만 이참에 &lt;a href="http://pytest.org/latest/"&gt;pytest&lt;/a&gt;를 사용해보기로 했다.&lt;/p&gt;
&lt;h3 id=""&gt;장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DB 파일을 매번 새로&lt;/li&gt;&lt;/ul&gt;</description><link>http://raccoonyy.github.io/pytest-for-django-test/</link><guid isPermaLink="false">59815cfbdd47a80001bb9eab</guid><category>Django</category><category>pytest</category><category>test</category><category>django-test</category><dc:creator>raccoony</dc:creator><pubDate>Tue, 24 Mar 2015 14:35:54 GMT</pubDate><content:encoded>&lt;p&gt;버전 1.7부터 django에서 기본으로 제공하는 테스트 러너가 마이그레이션 과정을 거치기 시작했다. 당연히 테스트 과정에 드는 시간은 늘어났고. 1.8에서는 &lt;code&gt;--keepdb&lt;/code&gt;라는 옵션을 &lt;a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-option---keepdb"&gt;제공&lt;/a&gt;하여 마이그레이션을 회피할 수 있는 듯 하다. 1.7에서도 작동하는 우회법(&lt;a href="https://pypi.python.org/pypi/django-test-without-migrations"&gt;1&lt;/a&gt;, &lt;a href="https://gist.github.com/nealtodd/2869341f38f5b1eeb86d"&gt;2&lt;/a&gt;)들도 존재한다.&lt;/p&gt;
&lt;p&gt;하지만 이참에 &lt;a href="http://pytest.org/latest/"&gt;pytest&lt;/a&gt;를 사용해보기로 했다.&lt;/p&gt;
&lt;h3 id=""&gt;장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DB 파일을 매번 새로 만들지 않는다. (=테스트 실행 속도 향상)&lt;/li&gt;
&lt;li&gt;테스트 간 의존성을 관리할 수 있다.&lt;/li&gt;
&lt;li&gt;테스트 동시 실행도 가능한다. (pytest-xdist 필요)&lt;/li&gt;
&lt;li&gt;기존 테스트들과 호환된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ pip install pytest-django
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 하면 pytest 뿐만 아니라 django의 테스트 코드를 인식하는 플러그인도 설치된다.&lt;/p&gt;
&lt;h3 id=""&gt;설정&lt;/h3&gt;
&lt;p&gt;테스트를 실행할 디렉터리에 (보통은 &lt;code&gt;manage.py&lt;/code&gt; 파일이 위치하는 디렉터리) &lt;code&gt;pytest.ini&lt;/code&gt; 파일을 생성하고, 테스트에 사용하는 설정 파일을 지정해준다. (아래는 설정 파일이 &lt;code&gt;./settings/test.py&lt;/code&gt;인 경우)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ini"&gt;[pytest]
DJANGO_SETTINGS_MODULE=settings.test
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=""&gt;사용&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ py.test

=========================== test session starts ============================
platform darwin -- Python 2.7.8 -- py-1.4.26 -- pytest-2.6.4
plugins: django
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;현재 플랫폼에 설치된 파이썬과 pytest의 버전이 출력된 다음 django 테스트들이 실행된다. 하지만 마이그레이션이 먼저 실행되면서 시간을 잡아먹거나 오류를 발생시킨다. 이럴 땐, &lt;code&gt;--nomigrations&lt;/code&gt; 옵션을 붙이면 마이그레이션 과정을 건너 뛴다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ py.test --nomigrations
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=""&gt;병렬 실행&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pytest-xdist&lt;/code&gt; 플러그인을 설치하면 테스트들을 병렬적으로 실행할 수도 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ pip install pytest-xdist
$ py.test -n 3  # 테스트가 3개씩 병렬적으로 실행됨
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="continuoustest"&gt;Continuous Test&lt;/h3&gt;
&lt;p&gt;소스코드가 바뀌었을 때 자동으로 테스트를 실행할 수는 없을까? &lt;code&gt;pytest-xdixt&lt;/code&gt; 플러그인이 설치된 상태에서 &lt;code&gt;-f&lt;/code&gt; 옵션을 사용하면 가능하다. 똑똑하게도 바뀐 소스에 대한 테스트만 먼저 실행하고, 이를 통과하면 전체 테스트를 수행한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ py.test -f   # 소스코드가 바뀌면 자동으로 테스트가 실행된다 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=""&gt;디버거와 함께&lt;/h3&gt;
&lt;p&gt;테스트 실행 도중 특정 위치에서 디버거를 켜고 싶을 수도 있다. &lt;code&gt;--pdb&lt;/code&gt; 옵션을 사용하자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;--pdb&lt;/code&gt;와 &lt;code&gt;-f&lt;/code&gt; 옵션은 함께 사용할 수 없다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ py.test --pdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 테스트 코드 중간에 다음과 같은 코드를 삽입한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;import pytest
pytest.set_trace()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;테스트가 실행되다가 해당 부분에서 멈추고 디버거를 보여준다.&lt;/p&gt;
&lt;p&gt;이 외에도 유용한 기능들은 &lt;a href="https://pytest.org/latest/usage.html"&gt;pytest 사용법(영문)&lt;/a&gt; 페이지를 참고하자.&lt;/p&gt;
</content:encoded></item></channel></rss></html>