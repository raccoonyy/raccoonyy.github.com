<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>raccoonys favorite - raccoony's cave</title><description>Raccoony writes about programming, book and etc.</description><link>http://raccoonyy.github.io/</link><image><url>http://raccoonyy.github.io/favicon.png</url><title>raccoonys favorite - raccoony's cave</title><link>http://raccoonyy.github.io/</link></image><generator>Ghost 2.19</generator><lastBuildDate>Tue, 09 Apr 2019 21:39:30 GMT</lastBuildDate><atom:link href="http://raccoonyy.github.io/tag/raccoonys-favorite/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>[RFDP] django-summernote</title><description>summernote라는 꽤 괜찮은 오픈소스 에디터를 django에 손쉽게 적용할 수 있는 플러그인입니다.</description><link>http://raccoonyy.github.io/django-summernote/</link><guid isPermaLink="false">59815cfbdd47a80001bb9ea7</guid><category>django plugins</category><category>Django</category><category>django-summernote</category><category>raccoonys favorite</category><dc:creator>raccoony</dc:creator><pubDate>Thu, 03 Dec 2015 23:35:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" medium="image"/><content:encoded>&lt;blockquote&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" alt="[RFDP] django-summernote"&gt;&lt;p&gt;RFDP : Raccoony's Favorite Django Plugins&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;웹 페이지에 쓸 만한 위지윅 에디터를 찾기란 쉽지 않은데요. &lt;a href="http://summernote.org/"&gt;summernote&lt;/a&gt;라는 꽤 괜찮은 오픈소스 에디터를 django에 손쉽게 적용할 수 있는 django-summernote를 소개합니다.&lt;/p&gt;
&lt;p&gt;플러그인 이름 : django-summernote&lt;/p&gt;
&lt;p&gt;저장소 : &lt;a href="https://github.com/summernote/django-summernote"&gt;https://github.com/summernote/django-summernote&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=""&gt;쓰임새&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://summernote.org/"&gt;summernote&lt;/a&gt;를 django 페이지에서 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://raccoonyy.github.io/content/images/2015/12/Screenshot-2015-12-04-04-27-47.png" alt="[RFDP] django-summernote"&gt;&lt;/p&gt;
&lt;h2 id=""&gt;설치&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install django-summernote
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;설정&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;에 &lt;code&gt;django_summernote&lt;/code&gt;를 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;INSTALLED_APPS += ('django_summernote', )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt; 파일에는 django-summernote에 대한 항목을 추가하고요.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;urlpatterns = patterns('',
    ...
    (r'^summernote/', include('django_summernote.urls')),
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;데이터베이스 마이그레이션을 해줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;사용법&lt;/h2&gt;
&lt;h3 id="form"&gt;form에 적용하려면&lt;/h3&gt;
&lt;p&gt;다음과 같이 특정 필드의 widget을 &lt;code&gt;SummernoteWidget&lt;/code&gt;이나 &lt;code&gt;SummernoteInplaceWidget&lt;/code&gt;으로 지정해주고,&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from django_summernote.widgets import SummernoteWidget, SummernoteInplaceWidget

# Apply summernote to specific fields.
class SomeForm(forms.Form):
    foo = forms.CharField(widget=SummernoteWidget())  # instead of forms.Textarea

# If you don't like &amp;lt;iframe&amp;gt;, then use inplace widget
# Or if you're using django-crispy-forms, please use this.
class AnotherForm(forms.Form):
    bar = forms.CharField(widget=SummernoteInplaceWidget())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;템플릿 파일에서 해당 필드를 출력할 때 &lt;code&gt;safe&lt;/code&gt; 필터를 적용하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;{{ foobar|safe }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="admin"&gt;admin 화면에 적용하고 싶다면&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;admin.py&lt;/code&gt;에 ModelAdmin에서 &lt;code&gt;SummernoteModelAdmin&lt;/code&gt;을 상속받습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from django_summernote.admin import SummernoteModelAdmin

# Apply summernote to all TextField in model.
class SomeModelAdmin(SummernoteModelAdmin):  # instead of ModelAdmin
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;설정&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt;에 몇 가지 설정을 추가할 수 있는데요. 이를테면 summernote가 보여질 모드 선택(iframe 등), 기본 언어 코드 설정, 에디터 툴바에 나타내고 싶은 아이콘 설정하기 등이 가능합니다.&lt;/p&gt;
&lt;p&gt;자세한 사항은 &lt;a href="https://github.com/summernote/django-summernote#options"&gt;django-summernote 저장소의 README&lt;/a&gt;를 참고하세요.&lt;/p&gt;
</content:encoded></item><item><title>[RFDP] django-flat-theme</title><description>설정도 단순하고 모양도 꽤 괜찮은 Django 관리자 화면용 테마입니다.</description><link>http://raccoonyy.github.io/django-flat-theme/</link><guid isPermaLink="false">59815cfbdd47a80001bb9eb1</guid><category>Django</category><category>django plugins</category><category>admin</category><category>django-flat-theme</category><category>raccoonys favorite</category><dc:creator>raccoony</dc:creator><pubDate>Fri, 10 Apr 2015 08:29:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" medium="image"/><content:encoded>&lt;blockquote&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" alt="[RFDP] django-flat-theme"&gt;&lt;p&gt;RFDP : Raccoony's Favorite Django Plugins&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;지난 번에는 Django 관리자 화면을 조금 예쁘게 바꿔주는 &lt;a href="http://raccoonyy.github.io/django-wpadmin"&gt;django-wpadmin&lt;/a&gt;을 소개해드렸었는데요. 이것보다 설정이 더 단순하고 모양도 꽤 괜찮은 플러그인이 나와서 소개해봅니다.&lt;/p&gt;
&lt;p&gt;플러그인 이름 : django-flat-theme&lt;/p&gt;
&lt;p&gt;저장소 : &lt;a href="https://github.com/elky/django-flat-theme"&gt;https://github.com/elky/django-flat-theme&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=""&gt;모습&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://cloud.githubusercontent.com/assets/209663/6742227/df93dade-ceaf-11e4-9b88-aacf33b4eb3c.png" alt="[RFDP] django-flat-theme"&gt;&lt;/p&gt;
&lt;h2 id=""&gt;설치&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install django-flat-theme
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;설정&lt;/h2&gt;
&lt;p&gt;settings.py의 INSTALLED_APPS에서 &lt;code&gt;django.contrib.admin&lt;/code&gt;보다 앞에 &lt;code&gt;flat&lt;/code&gt;을 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;INSTALLED_APPS = (
    ...
    'flat',
    'django.contrib.admin',
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;주의점&lt;/h2&gt;
&lt;p&gt;Django 1.6 이상에서 작동하고, 그 이전 버전에서는 아이콘이 좀 달라 보일 수 있다고 하네요.&lt;/p&gt;
</content:encoded></item><item><title>[RFDP] django-debug-toolbar</title><description>django로 만든 웹페이지에서 SQL 쿼리, request, header 등을 확인할 수 있는 플러그인입니다.</description><link>http://raccoonyy.github.io/django-debug-toolbar/</link><guid isPermaLink="false">59815cfbdd47a80001bb9ea9</guid><category>Django</category><category>django plugins</category><category>django-debug-toolbar</category><category>raccoonys favorite</category><dc:creator>raccoony</dc:creator><pubDate>Thu, 02 Apr 2015 02:18:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" medium="image"/><content:encoded>&lt;blockquote&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" alt="[RFDP] django-debug-toolbar"&gt;&lt;p&gt;RFDP : Raccoony's Favorite Django Plugins&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;오늘 소개할 플러그인은 Django 개발하는 분들이라면 모르는 분이 없을 django-debug-toolbar입니다.&lt;/p&gt;
&lt;p&gt;플러그인 이름 : django-debug-toolbar&lt;/p&gt;
&lt;p&gt;저장소 : &lt;a href="https://github.com/django-debug-toolbar/"&gt;https://github.com/django-debug-toolbar/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;공식 문서 : &lt;a href="http://django-debug-toolbar.readthedocs.org/"&gt;http://django-debug-toolbar.readthedocs.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=""&gt;쓰임새&lt;/h2&gt;
&lt;p&gt;django로 만든 웹페이지에서 SQL 쿼리, request, header 등을 확인할 수 있습니다.&lt;/p&gt;
&lt;h2 id=""&gt;설치&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install django-debug-toolbar
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;설정&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;에는 &lt;code&gt;debug_toolbar&lt;/code&gt; 뿐만 아니라 &lt;code&gt;django.contrib.staticfiles&lt;/code&gt;도 꼭 넣어주셔야 합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;INSTALLED_APPS = (
    # ...
    'django.contrib.staticfiles',
    # ...
    'debug_toolbar',
)

MIDDLEWARE_CLASSES = (
    # ...
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    # ...
)

INTERNAL_IPS = ('127.0.0.1', )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Django 1.7부터는 settings.py에 &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;가 없을 텐데요. 기본 미들웨어 없이 아래와 같이 설정해도 잘 작동합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;MIDDLEWARE_CLASSES = (
    'debug_toolbar.middleware.DebugToolbarMiddleware',
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;urls.py 파일에는 다음과 같은 코드를 맨 아래 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;if settings.DEBUG:
    import debug_toolbar
    urlpatterns.append(
        url(r'^__debug__/', include(debug_toolbar.urls)))
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;로컬 서버에서 웹페이지 오른쪽에 DJDT라고 써있는 반투명한 버튼이 보이면 설치에 성공한 겁니다.&lt;/p&gt;
&lt;h2 id=""&gt;각 패널의 기능&lt;/h2&gt;
&lt;p&gt;웹페이지 오른쪽의 DJDT 버튼을 누르면 여러 패널이 나타나는데요. 각 패널이 담고 있는 정보는 다음과 같습니다.&lt;/p&gt;
&lt;h3 id="version"&gt;Version&lt;/h3&gt;
&lt;p&gt;파이썬, Django 외에도 pip로 설치한 앱들의 버전을 알려줍니다.&lt;/p&gt;
&lt;h3 id="time"&gt;Time&lt;/h3&gt;
&lt;p&gt;응답하기까지 걸린 시간&lt;/p&gt;
&lt;h3 id="settings"&gt;Settings&lt;/h3&gt;
&lt;p&gt;settings.py의 설정들을 보여줍니다.&lt;/p&gt;
&lt;h3 id="headers"&gt;Headers&lt;/h3&gt;
&lt;p&gt;HTTP 요청과 응답의 헤더 값을 보여줍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 설정시 debug_toolbar 아래 쪽에 추가한 미들웨어들의 값은 보이지 않습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="request"&gt;Request&lt;/h3&gt;
&lt;p&gt;GET이나 POST, 쿠키, 세션 등의 값을 보여줍니다.&lt;/p&gt;
&lt;h3 id="sql"&gt;SQL&lt;/h3&gt;
&lt;p&gt;SQL 쿼리와 처리 시간을 알려줍니다.&lt;/p&gt;
&lt;h3 id="staticfiles"&gt;Static files&lt;/h3&gt;
&lt;p&gt;사용된 스태틱 파일과 위치를 알려줍니다.&lt;/p&gt;
&lt;h3 id="template"&gt;Template&lt;/h3&gt;
&lt;p&gt;어떤 템플릿 파일을 사용했는지, 이때 context의 값은 어떤지를 보여줍니다.&lt;/p&gt;
&lt;h3 id="cache"&gt;Cache&lt;/h3&gt;
&lt;p&gt;캐시를 사용했다면 그 내용을 보여줍니다.&lt;/p&gt;
&lt;h3 id="signal"&gt;Signal&lt;/h3&gt;
&lt;p&gt;시그널과 전달인자, 리시버를 알려줍니다.&lt;/p&gt;
&lt;h3 id="logging"&gt;Logging&lt;/h3&gt;
&lt;p&gt;파이썬 내장 로깅 모듈을 사용했을 때의 출력 로그를 보여줍니다.&lt;/p&gt;
&lt;h3 id="interceptredirects"&gt;Intercept Redirects&lt;/h3&gt;
&lt;p&gt;다른 페이지로 리디렉트하는 경우, 이를 가로막고 알려줍니다.&lt;/p&gt;
</content:encoded></item><item><title>[RFDP] django-wpadmin</title><description>django 관리자 화면의 디자인을 좀더 산뜻하게 바꿔주는 플러그인입니다.</description><link>http://raccoonyy.github.io/django-wpadmin/</link><guid isPermaLink="false">59815cfbdd47a80001bb9ea6</guid><category>Django</category><category>django plugins</category><category>django-wpadmin</category><category>wpadmin</category><category>admin</category><category>raccoonys favorite</category><dc:creator>raccoony</dc:creator><pubDate>Thu, 26 Mar 2015 05:54:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" medium="image"/><content:encoded>&lt;blockquote&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" alt="[RFDP] django-wpadmin"&gt;&lt;p&gt;RFDP : Raccoony's Favorite Django Plugins&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Django의 Admin 화면은 굉장히 유용하지만, 간혹 아쉬움을 느끼는 기능도 있습니다. 일단 디자인이 90년대 게시판 느낌이죠.&lt;/p&gt;
&lt;p&gt;그래서 디자인을 바꾸거나 기능을 추가해주는 플러그인들이 꽤 많이 나왔습니다. 그 중에 제가 선택한 플러그인은 django-wpadmin.&lt;/p&gt;
&lt;p&gt;플러그인 이름 : django-wpadmin&lt;/p&gt;
&lt;p&gt;저장소 : &lt;a href="https://github.com/barszczmm/django-wpadmin/"&gt;https://github.com/barszczmm/django-wpadmin/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;공식 문서 : &lt;a href="http://django-wp-admin.readthedocs.org/"&gt;http://django-wp-admin.readthedocs.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=""&gt;쓰임새&lt;/h2&gt;
&lt;p&gt;Django Admin 화면을 바꿔 줌&lt;/p&gt;
&lt;h2 id=""&gt;설치&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install django-wpadmin
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;설정&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;INSTALLED_APPS = (
    ...
    # django.contrib.admin 보다 앞에 추가해야 함
    'wpadmin',
    ...
)
 
TEMPLATE_CONTEXT_PROCESSORS = (
    ...
    'django.core.context_processors.request',
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;특징&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;반응형 디자인 지원&lt;/li&gt;
&lt;li&gt;모델 간 이동이 편리(앱 목록이 왼쪽에 나오고 커서를 올리면 모델이 바로 보입니다.)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="admin"&gt;다른 Admin 플러그인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/izi/django-admin-tools/wiki/Home"&gt;django-admin-tools&lt;/a&gt;&lt;br&gt;
{&amp;lt;1&amp;gt;}![&lt;a href="http://www.izimobil.org/django-admin-tools/images/capture-2.png"&gt;http://www.izimobil.org/django-admin-tools/images/capture-2.png&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://grappelliproject.com/"&gt;django-grappelli&lt;/a&gt;&lt;br&gt;
{&amp;lt;2&amp;gt;}![&lt;a href="http://grappelliproject.com/static/img/mb_desktop_1880.jpg"&gt;http://grappelliproject.com/static/img/mb_desktop_1880.jpg&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/douglasmiranda/django-admin-bootstrap/tree/master/screenshots"&gt;django-admin-bootstrap&lt;/a&gt;&lt;br&gt;
{&amp;lt;3&amp;gt;}![&lt;a href="https://github.com/douglasmiranda/django-admin-bootstrap/tree/master/screenshots"&gt;https://github.com/douglasmiranda/django-admin-bootstrap/tree/master/screenshots&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://djangosuit.com/"&gt;django-suit&lt;/a&gt;&lt;br&gt;
{&amp;lt;4&amp;gt;}![&lt;a href="https://camo.githubusercontent.com/9c5d4a143e16676ea2ceffa9dc26814326080fda/68747470733a2f2f7261772e6769746875622e636f6d2f6461726b6c6f772f646a616e676f2d737569742f646576656c6f702f646f63732f5f7374617469632f696d672f646a616e676f2d737569742e706e67"&gt;https://camo.githubusercontent.com/9c5d4a143e16676ea2ceffa9dc26814326080fda/68747470733a2f2f7261772e6769746875622e636f6d2f6461726b6c6f772f646a616e676f2d737569742f646576656c6f702f646f63732f5f7374617469632f696d672f646a616e676f2d737569742e706e67&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sshwsfc/django-xadmin"&gt;django-xadmin&lt;/a&gt;&lt;br&gt;
{&amp;lt;5&amp;gt;}![&lt;a href="https://camo.githubusercontent.com/f5606beae2015e8be048b7d73730c3b54b4688b4/68747470733a2f2f7261772e6769746875622e636f6d2f626172737a637a6d6d2f646a616e676f2d777061646d696e2f6d61737465722f646f63732f696d616765732f646a616e676f2d777061646d696e2e706e67"&gt;https://camo.githubusercontent.com/f5606beae2015e8be048b7d73730c3b54b4688b4/68747470733a2f2f7261772e6769746875622e636f6d2f626172737a637a6d6d2f646a616e676f2d777061646d696e2f6d61737465722f646f63732f696d616765732f646a616e676f2d777061646d696e2e706e67&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;심심하고 재미 없어 보이는 Django Admin 화면에 활력을 끼얹어보세요. :)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;어떤 플러그인은 개인 용도로 사용할 땐 제한이 없지만 회사에서 사용할 땐 비용을 지불해야 하는 경우도 있으니, 문서를 잘 읽어보세요.&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item><item><title>[RFDP] django-extensions</title><description>django-admin.py가 제공하는 명령어보다 좀더 다양한 명령어를 제공하는 패키지입니다.</description><link>http://raccoonyy.github.io/django-extensions/</link><guid isPermaLink="false">59815cfbdd47a80001bb9ea4</guid><category>Django</category><category>django plugins</category><category>django-extensions</category><category>raccoonys favorite</category><dc:creator>raccoony</dc:creator><pubDate>Wed, 18 Mar 2015 02:58:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" medium="image"/><content:encoded>&lt;blockquote&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2016/06/raccoonys_favorite_django_plugins.jpg" alt="[RFDP] django-extensions"&gt;&lt;p&gt;RFDP : Raccoony's Favorite Django Plugins&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;플러그인 이름 : django-extensions&lt;/p&gt;
&lt;p&gt;저장소 : &lt;a href="https://github.com/django-extensions/django-extensions"&gt;https://github.com/django-extensions/django-extensions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;공식 문서 : &lt;a href="http://django-extensions.readthedocs.org/en/latest/"&gt;http://django-extensions.readthedocs.org/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=""&gt;쓰임새&lt;/h2&gt;
&lt;p&gt;django-admin.py가 제공하는 명령어보다 좀더 향상된 명령어를 제공합니다.&lt;/p&gt;
&lt;h2 id=""&gt;설치&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ pip install django-extensions
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;설정&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;INSTALLED_APPS = (
    ...
    'django_extensions',
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;명령어&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;admin_generator app&lt;/code&gt; : app의 관리자 화면을 생성해 줍니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clean_pyc&lt;/code&gt; : &lt;code&gt;*.pyc&lt;/code&gt; 파일을 모두 지워 줍니다. &lt;code&gt;settings.py&lt;/code&gt;에 BASE_DIR을 설정해야 합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;graph_models app&lt;/code&gt; : 특정 앱의 모델들의 관계도를 그림 파일로 저장합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;notes&lt;/code&gt; : 파이썬 파일에 적어둔 &lt;code&gt;# TODO:&lt;/code&gt; 주석들을 찾아 표시합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pipchecker&lt;/code&gt; : 사용 중인 패키지의 업데이트 현황을 알려줍니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;runserver_plus&lt;/code&gt; : 기본 웹 서버보다 향상된 웹 서버를 띄웁니다. 서버 오류가 발생하면 웹 상에서 바로 디버깅할 수 있습니다. &lt;code&gt;Werkzeug&lt;/code&gt;를 설치해야 합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;shell_plus&lt;/code&gt; : INSTALLED_APP에 설치된 앱의 모델들이 import된 셸을 띄웁니다(&lt;code&gt;ipython&lt;/code&gt;과 함께 사용하면 더 편합니다).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 외에도 다양한 명령을 지원하니, &lt;a href="http://django-extensions.readthedocs.org/en/latest/"&gt;공식 문서&lt;/a&gt;를 참고하세요.&lt;/p&gt;
</content:encoded></item></channel></rss></html>