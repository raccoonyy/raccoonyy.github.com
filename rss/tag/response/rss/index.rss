<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>response - raccoony's cave</title><description>Raccoony writes about programming, book and etc.</description><link>http://raccoonyy.github.io/</link><image><url>http://raccoonyy.github.io/favicon.png</url><title>response - raccoony's cave</title><link>http://raccoonyy.github.io/</link></image><generator>Ghost 1.21</generator><lastBuildDate>Wed, 28 Mar 2018 00:18:31 GMT</lastBuildDate><atom:link href="http://raccoonyy.github.io/tag/response/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>DRF3 튜토리얼 2 - 요청과 응답</title><description>(django-rest-framework 공식 문서를 번역함) 이번 튜토리얼부터 REST 프레임워크의 진정한 핵심부를 다루고자 합니다. 바로 요청(Request) 객체와 응답(Response) 객체입니다.</description><link>http://raccoonyy.github.io/drf3-tutorial-2/</link><guid isPermaLink="false">59815cfbdd47a80001bb9e9a</guid><category>django rest framework 3</category><category>DRF3</category><category>requests</category><category>response</category><category>Django</category><dc:creator>raccoony</dc:creator><pubDate>Fri, 06 Mar 2015 02:04:50 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2015/12/drf-logo.png" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://raccoonyy.github.io/content/images/2015/12/drf-logo.png" alt="DRF3 튜토리얼 2 - 요청과 응답"&gt;&lt;p&gt;원문 - &lt;a href="http://www.django-rest-framework.org/tutorial/2-requests-and-responses/"&gt;Requests and Responses&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;번역을 허락해 준 &lt;a href="https://twitter.com/_tomchristie"&gt;Tom Christie&lt;/a&gt;에게 고마움을 전합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="2"&gt;튜토리얼 2: 요청과 응답&lt;/h1&gt;
&lt;p&gt;이번 튜토리얼부터 REST 프레임워크의 진정한 핵심부를 다루고자 합니다. 먼저, 두 가지 핵심 요소를 소개하죠.&lt;/p&gt;
&lt;h2 id="request"&gt;요청(Request) 객체&lt;/h2&gt;
&lt;p&gt;REST 프레임워크의 &lt;code&gt;Request&lt;/code&gt; 객체는 평범한 &lt;code&gt;HttpRequest&lt;/code&gt; 객체를 확장하여 좀더 유연하게 요청을 파싱합니다. &lt;code&gt;Request&lt;/code&gt; 객체의 핵심부는 &lt;code&gt;request.data&lt;/code&gt; 속성입니다. 이 속성은 &lt;code&gt;request.POST&lt;/code&gt;와 비슷하지만 웹 API에 좀더 적합합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;request.POST  # 폼 데이터만 다루며, 'POST' 메서드에서만 사용 가능
request.data  # 아무 데이터나 다룰 수 있고, 'POST'뿐만 아니라 'PUT'과 'PATCH' 메서드에서도 사용 가능
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="response"&gt;응답(Response) 객체&lt;/h2&gt;
&lt;p&gt;REST 프레임워크에는 &lt;code&gt;Response&lt;/code&gt; 객체도 존재합니다. 이 객체는 &lt;code&gt;TemplateResponse&lt;/code&gt; 타입이며, 렌더링되지 않은 콘텐츠를 불러와 클라이언트에게 리턴할 콘텐츠 형태로 변환합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;return Response(data)  # 클라이언트가 요청한 형태로 콘텐트를 렌더링함
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;상태 코드&lt;/h2&gt;
&lt;p&gt;여러분이 만든 뷰에서 숫자 형태의 HTTP 상태 코드를 사용하는 경우, 읽기에도 어려울 뿐더러 코드에 오류가 있더라도 발견하기가 어렵습니다. REST 프레임워크에서는 각 상태 코드에 대해 좀더 명확한 식별자를 제공합니다. 예를 들어 &lt;code&gt;status&lt;/code&gt; 모듈의 &lt;code&gt;HTTP_400_BAD_REQUEST&lt;/code&gt; 같은 식별자 같이요. 숫자로 된 식별자를 사용하기보다는 문자 형태의 식별자를 사용하세요.&lt;/p&gt;
&lt;h2 id="api"&gt;API 뷰 감싸기&lt;/h2&gt;
&lt;p&gt;REST 프레임워크는 API 뷰를 작성하는 데 사용할 수 있는 두 가지 래퍼를 제공합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;@api_view&lt;/code&gt; 데코레이터를 함수 기반 뷰에서 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;APIView&lt;/code&gt; 클래스는 클래스 기반 뷰에서 사용할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 래퍼들은 뷰에서 받은 &lt;code&gt;Request&lt;/code&gt;에 몇몇 기능을 더하거나, 콘텐츠가 잘 변환되도록 &lt;code&gt;Response&lt;/code&gt;에 특정 context를 추가합니다.&lt;/p&gt;
&lt;p&gt;또한 때에 따라 &lt;code&gt;405 Method Not Allowed&lt;/code&gt;를 반환하거나, &lt;code&gt;request.data&lt;/code&gt;가 깨진 경우 &lt;code&gt;ParseError&lt;/code&gt; 예외를 던지는 등의 일도 수행합니다.&lt;/p&gt;
&lt;h2 id=""&gt;이 모든 것을 한 군데 모으기&lt;/h2&gt;
&lt;p&gt;그럼 이제 이 두 요소를 사용하여 뷰를 작성해봅시다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;views.py&lt;/code&gt;에 &lt;code&gt;JSONResponse&lt;/code&gt; 클래스는 더이상 필요하지 않으니 지웁시다. 그리고 뷰 코드를 조금 리팩터링합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from snippets.models import Snippet
from snippets.serializers import SnippetSerializer


@api_view(['GET', 'POST'])
def snippet_list(request):
    &amp;quot;&amp;quot;&amp;quot;
    코드 조각을 모두 보여주거나 새 코드 조각을 만듭니다.
    &amp;quot;&amp;quot;&amp;quot;
    if request.method == 'GET':
        snippets = Snippet.objects.all()
        serializer = SnippetSerializer(snippets, many=True)
        return Response(serializer.data)

    elif request.method == 'POST':
        serializer = SnippetSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;예제에 비해 목록 뷰가 조금 개선되었습니다. 조금 간단해지면서 폼 API와 유사하다는 느낌을 줍니다. 또한 이름 형태의 상태 코드를 사용하여 의미를 명확히 했습니다.&lt;/p&gt;
&lt;p&gt;이제 &lt;code&gt;views.py&lt;/code&gt;를 열어, 코드 조각 하나를 담당하는 뷰를 수정합시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;@api_view(['GET', 'PUT', 'DELETE'])
def snippet_detail(request, pk):
    &amp;quot;&amp;quot;&amp;quot;
    코드 조각 조회, 업데이트, 삭제
    &amp;quot;&amp;quot;&amp;quot;
    try:
        snippet = Snippet.objects.get(pk=pk)
    except Snippet.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = SnippetSerializer(snippet)
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = SnippetSerializer(snippet, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        snippet.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 또한 어디선가 본 듯 합니다. 일반적인 Django 뷰와 크게 다르지 않죠?&lt;/p&gt;
&lt;p&gt;여기서 특정 콘텐츠 형태에 대한 요청이나 응답을 명시적으로 연결하지 않았음을 주목하세요. &lt;code&gt;request.data&lt;/code&gt;는 &lt;code&gt;json&lt;/code&gt; 요청 뿐만 아니라 &lt;code&gt;yaml&lt;/code&gt;과 같은 다른 포맷도 다룰 수 있습니다. 응답 객체에 데이터를 담아 리턴하는 것과 비슷하면서도, REST 프레임워크에서는 우리가 원하는 형태로 응답 객체를 렌더링해 줍니다.&lt;/p&gt;
&lt;h2 id="url"&gt;URL의 접미어를 통해 다른 포맷 제공하기&lt;/h2&gt;
&lt;p&gt;앞에서 보았듯이 하나의 콘텐츠 형태에 묶여 있지 않다는 응답 객체의 장점을 활용하기 위해, 우리 API에서도 여러 형태의 포맷을 제공해 봅시다. 포맷의 접미어를 URL 형태로 전달받으려면, 다음과 같은 URL을 다룰 수 있어야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://example.com/api/items/4.json"&gt;http://example.com/api/items/4.json&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;일단 &lt;code&gt;format&lt;/code&gt; 키워드를 두 가지 뷰에 추가해 봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;def snippet_list(request, format=None):
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;def snippet_detail(request, pk, format=None):
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 이제 &lt;code&gt;urls.py&lt;/code&gt;를 조금 수정하겠습니다. 기존의 URL에 &lt;code&gt;format_suffix_patterns&lt;/code&gt;라는 패턴을 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from django.conf.urls import patterns, url
from rest_framework.urlpatterns import format_suffix_patterns
from snippets import views

urlpatterns = [
    url(r'^snippets/$', views.snippet_list),
    url(r'^snippets/(?P&amp;lt;pk&amp;gt;[0-9]+)/$', views.snippet_detail),
]

urlpatterns = format_suffix_patterns(urlpatterns)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 외에 더 수정한 부분은 없는데도, 코드는 간명해졌고, 사용자는 자신이 원하는 형태의 포맷을 전달 받을 수 있습니다.&lt;/p&gt;
&lt;h2 id=""&gt;어떻게 되었을까?&lt;/h2&gt;
&lt;p&gt;이제 &lt;a href="http://raccoonyy.github.io/drf3-tutorial-1"&gt;튜토리얼 1&lt;/a&gt;에서 했던 것처럼 명령행에서 API를 테스트해봅시다. 앞에서 했던 것과 비슷하게 작동하는 것처럼 보이지만, 이번에는 잘못된 요청에도 잘 대응합니다.&lt;/p&gt;
&lt;p&gt;전체 코드 조각 목록은 다음과 같이 받아올 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;http http://127.0.0.1:8000/snippets/

HTTP/1.1 200 OK
...
[
  {
    &amp;quot;id&amp;quot;: 1,
    &amp;quot;title&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;code&amp;quot;: &amp;quot;foo = \&amp;quot;bar\&amp;quot;\n&amp;quot;,
    &amp;quot;linenos&amp;quot;: false,
    &amp;quot;language&amp;quot;: &amp;quot;python&amp;quot;,
    &amp;quot;style&amp;quot;: &amp;quot;friendly&amp;quot;
  },
  {
    &amp;quot;id&amp;quot;: 2,
    &amp;quot;title&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;code&amp;quot;: &amp;quot;print \&amp;quot;hello, world\&amp;quot;\n&amp;quot;,
    &amp;quot;linenos&amp;quot;: false,
    &amp;quot;language&amp;quot;: &amp;quot;python&amp;quot;,
    &amp;quot;style&amp;quot;: &amp;quot;friendly&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 이제는 &lt;code&gt;Accept&lt;/code&gt; 헤더를 사용하여 응답 받을 데이터의 포맷도 지정할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;http http://127.0.0.1:8000/snippets/ Accept:application/json  # Request JSON
http http://127.0.0.1:8000/snippets/ Accept:text/html         # Request HTML
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아니면 포맷 접미어를 붙여도 되고요.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;http http://127.0.0.1:8000/snippets.json  # JSON suffix
http http://127.0.0.1:8000/snippets.api   # Browsable API suffix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;비슷하게, &lt;code&gt;Content-Type&lt;/code&gt; 헤더를 사용해도 응답 받을 데이터의 포맷을 지정할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# 데이터를 넘기면서 POST 요청
http --form POST http://127.0.0.1:8000/snippets/ code=&amp;quot;print 123&amp;quot;

{
  &amp;quot;id&amp;quot;: 3,
  &amp;quot;title&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;code&amp;quot;: &amp;quot;print 123&amp;quot;,
  &amp;quot;linenos&amp;quot;: false,
  &amp;quot;language&amp;quot;: &amp;quot;python&amp;quot;,
  &amp;quot;style&amp;quot;: &amp;quot;friendly&amp;quot;
}

# JSON으로 POST 요청
http --json POST http://127.0.0.1:8000/snippets/ code=&amp;quot;print 456&amp;quot;

{
    &amp;quot;id&amp;quot;: 4,
    &amp;quot;title&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;code&amp;quot;: &amp;quot;print 456&amp;quot;,
    &amp;quot;linenos&amp;quot;: false,
    &amp;quot;language&amp;quot;: &amp;quot;python&amp;quot;,
    &amp;quot;style&amp;quot;: &amp;quot;friendly&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자, 이제 브라우저에서도 확인해보세요. &lt;a href="http://127.0.0.1:8000/snippets/"&gt;http://127.0.0.1:8000/snippets/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="api"&gt;탐색 가능한 API&lt;/h3&gt;
&lt;p&gt;API는 클라이언트의 요청에 따라 데이터의 포맷을 결정하여 응답합니다. 따라서 웹 브라우저의 요청에 대해서는 기본적으로 HTML 형태로 응답해주게 됩니다. 이 덕분에 API를 웹 브라우저에서 탐색할 수 있습니다.&lt;/p&gt;
&lt;p&gt;브라우저에서 탐색 가능함은 사용성 면에서 굉장히 유용하여, API를 더 쉽게 개발하고 사용하도록 도와줍니다. 또한 다른 개발자들이 API를 파악하고 사용할 때의 진입장벽을 획기적으로 낮춰 줍니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.django-rest-framework.org/topics/browsable-api"&gt;브라우저에서 탐색 가능한 API&lt;/a&gt;에서 브라우저 탐색 기능에 대해 더 자세히 알아볼 수 있습니다.&lt;/p&gt;
&lt;h2 id="whatsnext"&gt;What's next?&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://raccoonyy.github.io/drf3-tutorial-3"&gt;튜토리얼 3부&lt;/a&gt;에서는 클래스 기반 뷰를 사용하면서, 일반적인 뷰에 비해 코드량이 얼마나 줄어드는지 확인하겠습니다.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss></html>