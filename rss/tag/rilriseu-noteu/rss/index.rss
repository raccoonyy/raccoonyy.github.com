<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>릴리스 노트 - raccoony's cave</title><description>Raccoony writes about programming, book and etc.</description><link>http://raccoonyy.github.io/</link><image><url>http://raccoonyy.github.io/favicon.png</url><title>릴리스 노트 - raccoony's cave</title><link>http://raccoonyy.github.io/</link></image><generator>Ghost 1.21</generator><lastBuildDate>Wed, 28 Mar 2018 00:18:40 GMT</lastBuildDate><atom:link href="http://raccoonyy.github.io/tag/rilriseu-noteu/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Django 2.0 릴리스와 주요 변경 사항</title><description>새 intro 페이지, 모바일 대응 관리자 화면과 함께 멋지게 등장한 Django 2.0! 어떤 기능이 추가되었을지 기대되지 않으세요? 이 글에서 확인해보세요. :)</description><link>http://raccoonyy.github.io/django-2-0-release-note-summary/</link><guid isPermaLink="false">5a13fc8178a6660001c96580</guid><category>Django</category><category>django 2.0</category><category>릴리스 노트</category><dc:creator>raccoony</dc:creator><pubDate>Sat, 02 Dec 2017 19:58:04 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2017/11/django-2.0.png" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://raccoonyy.github.io/content/images/2017/11/django-2.0.png" alt="Django 2.0 릴리스와 주요 변경 사항"&gt;&lt;p&gt;사진 출처: &lt;a href="https://www.flickr.com/photos/28744631@N06/8593971219/"&gt;Pinkie Pie by Daniel Chang&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django 2.0이 드디어 출시되었습니다. 첫 2.x 버전인데요. 이 글에서는 Django 2.0에 추가된 기능과 바뀐점을 간략하게 알아보려 합니다. &lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/"&gt;Django 공식 릴리스 노트&lt;/a&gt;를 참고하였습니다. &lt;strong&gt;주의! 릴리스 노트를 모두 번역하지는 않았습니다. 대신, 언뜻 이해가 되지 않은 부분엔 제 나름의 설명도 추가하였습니다.&lt;/strong&gt;&lt;br&gt;
하위 버전들의 보안 업데이트도 함께 올라왔습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2018-01-10 updated.&lt;br&gt;
url 라우팅 문법에서 예시 코드에 오류가 있었습니다. 2.0에서 추가된 새 문법을 사용하려면, &lt;code&gt;url()&lt;/code&gt; 메서드가 아닌 &lt;code&gt;path()&lt;/code&gt; 메서드를 사용해야 합니다. 임동현 님 고맙습니다. ^^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2017-12-03 updated.&lt;br&gt;
&lt;code&gt;User.is_authenticated()&lt;/code&gt; 메서드와 &lt;code&gt;User.is_anonymous()&lt;/code&gt; 메서드에 대해 잘못 번역한 내용을 수정하였습니다. 김남홍 님 고맙습니다. ^^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=""&gt;파이썬 호환성&lt;/h2&gt;
&lt;p&gt;Django 2.0은 파이썬 3.4, 3.5, 3.6에서 작동합니다. 각 버전별 마지막 릴리스를 사용하기를 추천합니다.&lt;br&gt;
Django 1.11.x는 파이썬 2.7을 지원하는 마지막 버전입니다.&lt;br&gt;
Django 2.0은 파이썬 3.4를 지원하는 마지막 버전입니다. Django 2.0의 수명 주기는 2019년 4월이므로, 이후에도 파이썬 3.4를 사용해야 한다면 수명주기가 2020년 4월까지인 Django 1.11 LTS를 사용하세요. (참고로 파이썬 3.4의 수명주기는 2019년 4월까지입니다.)&lt;/p&gt;
&lt;h2 id="django"&gt;서드파티 라이브러리의 Django 하위 호환성에 대해&lt;/h2&gt;
&lt;p&gt;Django 2.0에 맞춰 서드파티 라이브러리를 개발하고 있다면, Django 1.11 이전의 모든 버전에 대한 지원을 중단할 것을 제안합니다.&lt;/p&gt;
&lt;h2 id=""&gt;새 기능&lt;/h2&gt;
&lt;h4 id="url"&gt;URL 라우팅 문법 간소화&lt;/h4&gt;
&lt;p&gt;추가된 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/urls/#django.urls.path"&gt;&lt;code&gt;django.urls.path()&lt;/code&gt;&lt;/a&gt; 함수를 사용하면, 이렇게 조금 복잡했던 URL 라우팅 문법을&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;url(r'^book/(?P&amp;lt;pk&amp;gt;/d+)/$', views.book_detail),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 읽기 좋게 바꿀 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;path(r'^book/&amp;lt;int:pk&amp;gt;/', views.book_detail),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;새 문법에서는 URL 파라미터의 타입을 강제합니다.&lt;br&gt;
&lt;code&gt;django.conf.urls.url()&lt;/code&gt; 함수는 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/urls/#django.urls.re_path"&gt;&lt;code&gt;django.urls.re_path()&lt;/code&gt; 함수&lt;/a&gt;로 바뀌었습니다. &lt;code&gt;django.conf.urls.include()&lt;/code&gt;  함수는 &lt;code&gt;django.urls.include()&lt;/code&gt;로 옮겨졌습니다.&lt;br&gt;
새 URL 디스패처에 대해서는 &lt;a href="https://docs.djangoproject.com/en/2.0/topics/http/urls/"&gt;URL dispatcher 문서&lt;/a&gt;를 참고하세요.&lt;/p&gt;
&lt;h4 id=""&gt;모바일 친화적인 관리자 화면&lt;/h4&gt;
&lt;p&gt;관리자 화면이 반응형 레이아웃으로 바뀌며, 대다수 모바일 디바이스를 지원합니다.&lt;br&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2017/11/django-admin.png" alt="Django 2.0 릴리스와 주요 변경 사항"&gt;&lt;/p&gt;
&lt;h4 id="window"&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/expressions/#window-functions"&gt;&lt;code&gt;Window&lt;/code&gt; 데이터베이스 함수&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;쿼리셋에 &lt;code&gt;OVER&lt;/code&gt; 절을 추가할 수 있는 &lt;code&gt;Window&lt;/code&gt; 표현식이 추가되었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CumeDist(*expressions, **extra)&lt;/code&gt; 클래스는 &lt;a href="https://ko.wikipedia.org/wiki/%EB%88%84%EC%A0%81_%EB%B6%84%ED%8F%AC_%ED%95%A8%EC%88%98"&gt;누적 분포&lt;/a&gt;를 계산합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FirstValue(*expressions, **extra)&lt;/code&gt; 클래스는 해당 윈도우의 첫 행을 반환합니다. (없으면 &lt;code&gt;None&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lag(expression, offset=1, default=None, **extra&lt;/code&gt; 클래스는 &lt;code&gt;offset&lt;/code&gt; 만큼 앞에 있는 값을 구합니다. &lt;code&gt;offset&lt;/code&gt;에 해당하는 값이 없으면 &lt;code&gt;default&lt;/code&gt; 값을 반환합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;년도&lt;/th&gt;
&lt;th&gt;판매액&lt;/th&gt;
&lt;th&gt;Lag(offset=1, default=0)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;13,000&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;15,000&lt;/td&gt;
&lt;td&gt;13,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;20,000&lt;/td&gt;
&lt;td&gt;15,000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LastValue(*expressions, **extra)&lt;/code&gt; 클래스는 해당 윈도우의 마지막 행을 반환합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lead(expression, offset=1, default=None, **extra)&lt;/code&gt; 클래스는 &lt;code&gt;offset&lt;/code&gt;만큼 뒤에 있는 값을 구합니다. &lt;code&gt;offset&lt;/code&gt;에 해당하는 값이 없으면 &lt;code&gt;default&lt;/code&gt; 값을 반환합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;년도&lt;/th&gt;
&lt;th&gt;판매액&lt;/th&gt;
&lt;th&gt;Laed(offset=1, default=0)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;13,000&lt;/td&gt;
&lt;td&gt;15,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;15,000&lt;/td&gt;
&lt;td&gt;20,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;20,000&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NthValue(expression, nth=1, **extra)&lt;/code&gt; 클래스는 해당 윈도우의 &lt;code&gt;nth&lt;/code&gt;번째(항상 자연수) 행을 반환합니다. (값이 존재하지 않을 경우, 데이터베이스에 따라 다르게 작동합니다.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ntile(num_buckets=1, **extra)&lt;/code&gt; 클래스는 해당 윈도우를 &lt;code&gt;num_buckets&lt;/code&gt;만큼 분할한 결과를 반환합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RowNumber(*expressions, **extra)&lt;/code&gt; 클래스는 해당 윈도우의 정렬 방식에 따라 행 번호를 계산합니다.&lt;/li&gt;
&lt;li&gt;이후에 등장하는 Rank 관련 클래스의 결과는 다음 표와 같습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;행&lt;/th&gt;
&lt;th&gt;값&lt;/th&gt;
&lt;th&gt;Rank&lt;/th&gt;
&lt;th&gt;계산 결과&lt;/th&gt;
&lt;th&gt;PercentRank&lt;/th&gt;
&lt;th&gt;DenseRank&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;(1 - 1) / (7 - 1)&lt;/td&gt;
&lt;td&gt;0.0000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;(2 - 1) / (7 - 1)&lt;/td&gt;
&lt;td&gt;0.1666&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;(2 - 1) / (7 - 1)&lt;/td&gt;
&lt;td&gt;0.1666&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;(2 - 1) / (7 - 1)&lt;/td&gt;
&lt;td&gt;0.1666&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;(5 - 1) / (7 - 1)&lt;/td&gt;
&lt;td&gt;0.6666&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;(5 - 1) / (7 - 1)&lt;/td&gt;
&lt;td&gt;0.6666&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;(7 - 1) / (7 - 1)&lt;/td&gt;
&lt;td&gt;1.0000&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rank(*expressions, **extra)&lt;/code&gt; 클래스는 해당 윈도우에서 순위를 계산합니다. (공동 순위인 경우 다음 순위가 밀립니다.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PercentRank(*expressions, **extra)&lt;/code&gt; 클래스는 해당 윈도우에서 백분위(&lt;code&gt;(rank - 1) / (total rows - 1)&lt;/code&gt;)를 계산합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DenseRank(*expressions, **extra)&lt;/code&gt; 클래스는 &lt;code&gt;Rank&lt;/code&gt; 함수와 같지만 공동 순위를 하나로 취급합니다.&lt;/li&gt;
&lt;li&gt;자세한 내용은 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/database-functions/#window-functions"&gt;window 함수 문서&lt;/a&gt;와 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#aggregation-functions"&gt;aggregation 함수 문서&lt;/a&gt;를 참고하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=""&gt;사소한 변경&lt;/h2&gt;
&lt;h4 id="djangocontribadmin"&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/contrib/admin/#module-django.contrib.admin"&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.autocomplete_fields"&gt;&lt;code&gt;ModelAdmin.autocomplete_fields&lt;/code&gt;&lt;/a&gt; 속성과 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.get_autocomplete_fields"&gt;&lt;code&gt;ModelAdmin.get_autocomplete_fields()&lt;/code&gt;&lt;/a&gt; 메서드를 사용하면 ForeignKey나 ManyToManyField에 대해 &lt;a href="https://select2.org/"&gt;Select2&lt;/a&gt; 위짓을 적용할 수 있습니다.&lt;/p&gt;
&lt;h4 id="djangocontribauth"&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/topics/auth/#module-django.contrib.auth"&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;PBKDF2 비밀번호 해셔의 기본 이터레이션 횟수가 3만 6천 회에서 10만 회로 늘었습니다.&lt;/p&gt;
&lt;h4 id="djangocontribgis"&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/contrib/gis/#module-django.contrib.gis"&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MySQL을 위해 &lt;code&gt;AsGeoJSON&lt;/code&gt; 함수와 &lt;code&gt;GeoHash&lt;/code&gt; 함수, &lt;code&gt;IsValid&lt;/code&gt; 함수, &lt;code&gt;isvalid&lt;/code&gt; 룩업, &lt;code&gt;distance&lt;/code&gt; 룩업을 추가하였습니다.&lt;/li&gt;
&lt;li&gt;PostGIS와 SpatialLite를 위해 &lt;code&gt;Azimuth&lt;/code&gt; 함수와 &lt;code&gt;LineLocatePoint&lt;/code&gt; 함수가 추가되었습니다.&lt;/li&gt;
&lt;li&gt;이 외의 변경 사항은 &lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#django-contrib-gis"&gt;Django 2.0 릴리스 노트의 django.contrib.gis 항목&lt;/a&gt;을 참고하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="djangocontribpostgres"&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/contrib/postgres/#module-django.contrib.postgres"&gt;&lt;code&gt;django.contrib.postgres&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/contrib/postgres/aggregates/#django.contrib.postgres.aggregates.ArrayAgg"&gt;&lt;code&gt;ArrayAgg&lt;/code&gt;&lt;/a&gt; 함수에 &lt;code&gt;distinct&lt;/code&gt; 인자를 사용하여, 중복 값을 없앨 수 있습니다.&lt;/li&gt;
&lt;li&gt;UUID 버전 4를 리턴하는 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/contrib/postgres/functions/#django.contrib.postgres.functions.RandomUUID"&gt;&lt;code&gt;RondomUUID&lt;/code&gt;&lt;/a&gt; 함수가 추가되었습니다.&lt;/li&gt;
&lt;li&gt;이 외의 변경 사항은 &lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#django-contrib-postgres"&gt;Django 2.0 릴리스 노트의 django.contrib.postgres 항목&lt;/a&gt;을 참고하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=""&gt;캐시&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/topics/cache/#basic-usage"&gt;&lt;code&gt;cache.set_many()&lt;/code&gt;&lt;/a&gt; 함수가 캐시에 추가하다가 실패한 키의 목록을 리턴합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=""&gt;폼&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/forms/widgets/#django.forms.SplitDateTimeWidget"&gt;&lt;code&gt;SplitDateTimeWidget&lt;/code&gt;&lt;/a&gt;과 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/forms/widgets/#django.forms.SplitHiddenDateTimeWidget"&gt;&lt;code&gt;SplitHiddenDateTimeWidget&lt;/code&gt;&lt;/a&gt;에 &lt;code&gt;date_attrs&lt;/code&gt;와  &lt;code&gt;time_attrs&lt;/code&gt; 인자가 추가되었습니다. 이 인자들을 사용하면, &lt;code&gt;DateInput&lt;/code&gt; 위짓과 &lt;code&gt;TimeInput&lt;/code&gt; 위짓의 속성을 나누어 가져올 수 있습니다.&lt;/li&gt;
&lt;li&gt;폼 에러를 JSON 형태로 반환하는 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/forms/api/#django.forms.Form.errors.get_json_data"&gt;&lt;code&gt;Form.errors.get_json_data()&lt;/code&gt;&lt;/a&gt; 메서드가 추가되었습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=""&gt;관리용 커맨드&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/django-admin/#django-admin-loaddata"&gt;&lt;code&gt;loaddata&lt;/code&gt;&lt;/a&gt; 명령에서 표준 입력을 받습니다.&lt;/li&gt;
&lt;li&gt;이 외의 변경사항은 &lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#management-commands"&gt;Django 2.0 릴리스 노트의 관리용 커맨드 항목&lt;/a&gt;을 참고하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=""&gt;마이그레이션&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/django-admin/#squashmigrations"&gt;&lt;code&gt;squashmigrations&lt;/code&gt;&lt;/a&gt; 명령에, 합쳐진 마이그레이션 파일의 이름을 지정할 수 있는 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/django-admin/#cmdoption-squashmigrations-squashed-name"&gt;&lt;code&gt;--squashed-name&lt;/code&gt;&lt;/a&gt; 옵션이 추가되었습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=""&gt;모델&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;문자열 안에서 특정 문자열의 위치를 알아낼 수 있는, &lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/database-functions/#django.db.models.functions.StrIndex"&gt;StrIndex&lt;/a&gt; 데이터베이스 함수가 추가되었습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;from django.db.models import Value as V
from django.db.models functions import StrIndex
Book.objects.create(title=&amp;quot;The Hitchhiker's Guide to Python&amp;quot;)
Book.objects.annotate(
    python_index=StrIndex('title', V('Python'))
).get().python_index  # 26
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.query.QuerySet.earliest"&gt;&lt;code&gt;QuerySet.earliest()&lt;/code&gt;&lt;/a&gt; 메서드와 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.query.QuerySet.latest"&gt;&lt;code&gt;QuerySet.latest()&lt;/code&gt;&lt;/a&gt; 메서드, &lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/options/#django.db.models.Options.get_latest_by"&gt;&lt;code&gt;Meta.get_latest_by&lt;/code&gt;&lt;/a&gt; 옵션에서 여러 필드 정렬을 지원합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateField&lt;/code&gt;나 &lt;code&gt;DateTimeField&lt;/code&gt;에서 분기 정보를 알아내는 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/database-functions/#django.db.models.functions.ExtractQuarter"&gt;&lt;code&gt;ExtractQuarter&lt;/code&gt;&lt;/a&gt; 함수와 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#std:fieldlookup-quarter"&gt;&lt;code&gt;quearter&lt;/code&gt;&lt;/a&gt; 룩업이 추가되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateField&lt;/code&gt;나 &lt;code&gt;DateTimeField&lt;/code&gt;에서 분기의 첫 날까지만 잘라내는 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/database-functions/#django.db.models.functions.TruncQuarter"&gt;&lt;code&gt;TrauncQuarter&lt;/code&gt;&lt;/a&gt; 함수가 추가되었습니다.&lt;/li&gt;
&lt;li&gt;PostgresSQL과 Oracle 환경이라면, &lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.query.QuerySet.select_for_update"&gt;&lt;code&gt;QuerySet.select_for_update()&lt;/code&gt;&lt;/a&gt; 메서드를 사용할 때 &lt;code&gt;select_related()&lt;/code&gt;로 연결된 모든 테이블을 잠그는 대신, 새로 추가된 &lt;code&gt;of&lt;/code&gt; 인자를 사용하여 특정 테이블의 해당 행만 잠글 수 있습니다.&lt;/li&gt;
&lt;li&gt;새로 추가된 &lt;code&gt;filter&lt;/code&gt; 인자를 사용하면 여러 Aggregation에서 한 필드에 대한 조건을 추가할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.query.QuerySet.values_list"&gt;&lt;code&gt;QuerySet.values_list&lt;/code&gt;&lt;/a&gt; 메서드에 새로 추가된 &lt;code&gt;named&lt;/code&gt; 인자를 사용하여, 결과 값을 네임드 튜플로 변환할 수 있습니다.&lt;/li&gt;
&lt;li&gt;쿼리셋에 &lt;code&gt;ON&lt;/code&gt; 절을 추가할 수 있는 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.FilteredRelation"&gt;&lt;code&gt;FilteredRelation&lt;/code&gt;&lt;/a&gt; 클래스가 추가되었습니다.&lt;/li&gt;
&lt;li&gt;이 외의 변경사항은 &lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#models"&gt;Django 2.0 릴리스 노트의 Models 항목&lt;/a&gt;을 참고하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=""&gt;페이지네이션&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;새로 추가된 &lt;a href="https://docs.djangoproject.com/en/2.0/topics/pagination/#django.core.paginator.Paginator.get_page"&gt;&lt;code&gt;Paginator.get_path&lt;/code&gt;&lt;/a&gt; 메서드는 잘못된 페이지 번호를 적절히 제어합니다. (숫자가 아닌 경우엔 첫 페이지를 리턴하고, 음수나 마지막 페이지보다 큰 숫자인 경우엔 마지막 페이지를 리턴합니다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=""&gt;요청과 응답&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/django-admin/#django-admin-runserver"&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt;로 실행되는 웹 서버가 HTTP 1.1을 지원합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=""&gt;하위 호환이 중단된 기능&lt;/h2&gt;
&lt;h4 id=""&gt;바이트스트링 지원 삭제&lt;/h4&gt;
&lt;p&gt;파이썬 2를 지원하지 않음에 따라 바이트스트링은 오직 입출력에서만 사용합니다.&lt;/p&gt;
&lt;h4 id="api"&gt;데이터베이스 백엔드 API&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;자세한 변경 사항은 &lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#database-backend-api"&gt;Django 2.0 릴리스 노트의 데이터베이스 백엔드 API 항목&lt;/a&gt;을 참고하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="oracle112"&gt;Oracle 11.2 지원 중단&lt;/h4&gt;
&lt;p&gt;Oracle 11.2의 공식 지원이 2020년 12월에 끝나며, Django 1.11의 공식 지원이 2020년 4월에 끝나니 시점이 비슷합니다. 따라서 Django 2.0은 Oracle 12.1 이상만 지원합니다.&lt;/p&gt;
&lt;h4 id="mysqlisolationlevelreadcommitted"&gt;MySQL 격리 수준(isolation level)의 기본값이 &lt;code&gt;read committed&lt;/code&gt;로 변경&lt;/h4&gt;
&lt;p&gt;MySQL의 기본 값인 &lt;code&gt;repeatable read&lt;/code&gt;가 Django에서 데이터 손실을 발생시키는 문제가 있었나 봅니다. 다른 값을 사용하고 싶다면 &lt;a href="https://docs.djangoproject.com/en/2.0/ref/databases/#mysql-isolation-level"&gt;Django 공식 문서의 Databases 페이지에서 Isolation level 항목&lt;/a&gt;을 참고하세요.&lt;/p&gt;
&lt;h4 id="abstractuserlast_namemax_length150"&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/contrib/auth/#django.contrib.auth.models.User.last_name"&gt;&lt;code&gt;AbstractUser.last_name&lt;/code&gt;&lt;/a&gt;의 &lt;code&gt;max_length&lt;/code&gt;가 150으로 감소&lt;/h4&gt;
&lt;p&gt;자세한 내용은 lqez님이 작성하신 &lt;a href="https://lqez.github.io/blog/the-length-of-django-username.html"&gt;The length of Django username 블로그 글(우리말)&lt;/a&gt;을 참고하세요.&lt;/p&gt;
&lt;h4 id="slicingquerysetreverselast"&gt;슬라이싱(slicing) 이후 &lt;code&gt;QuerySet.reverse()&lt;/code&gt; 메서드와 &lt;code&gt;last()&lt;/code&gt; 메서드 금지&lt;/h4&gt;
&lt;p&gt;쿼리셋에 슬라이싱을 적용한 이후에는 &lt;code&gt;reverse()&lt;/code&gt; 메서드와 &lt;code&gt;last()&lt;/code&gt; 메서드를 사용할 수 없습니다.&lt;/p&gt;
&lt;h4 id="sqliteforeignkey"&gt;SQLite에서 참조키(Foreign Key) 강제를 지원&lt;/h4&gt;
&lt;p&gt;SQLite에 쌓인 기존 데이터를 사용하려면 &lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#foreign-key-constraints-are-now-enabled-on-sqlite"&gt;Django 2.0 릴리스 노트의 SQLite 참조키 관련 항목&lt;/a&gt;을 참고하세요.&lt;/p&gt;
&lt;h4 id="django20"&gt;이 외의 변경사항은 &lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#backwards-incompatible-changes-in-2-0"&gt;Django 2.0 릴리스 노트의 하위 호환이 중단된 기능 항목&lt;/a&gt;을 참고하세요.&lt;/h4&gt;
&lt;h2 id=""&gt;중단 예정인 기능&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Field.from_db_value()&lt;/code&gt;와 &lt;code&gt;Expression.conver_value()&lt;/code&gt;의 &lt;code&gt;context&lt;/code&gt; 인자가 (Django 3.0 이후) 사라질 예정입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=""&gt;사소한 수정&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django.db.backends.postgresql_psycopg2&lt;/code&gt; 대신 Django 1.9에서 추가된 &lt;code&gt;django.db.backends.postgresql&lt;/code&gt;을 사용하세요.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django.shortcuts.render_to_response()&lt;/code&gt; 대신 &lt;a href="https://docs.djangoproject.com/en/2.0/topics/http/shortcuts/#django.shortcuts.render"&gt;&lt;code&gt;django.shortcuts.render()&lt;/code&gt;&lt;/a&gt;를 사용하세요.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QuerySet.earliest()&lt;/code&gt; 메서드와 &lt;code&gt;QuerySet.latest()&lt;/code&gt; 메서드에서 사용하던 &lt;code&gt;field_name&lt;/code&gt; 인자가 중단될 예정입니다. &lt;code&gt;.earliest(field_name='title')&lt;/code&gt; 대신 &lt;code&gt;.earliest('title')&lt;/code&gt;처럼 사용하세요.&lt;/li&gt;
&lt;li&gt;이 외의 변경사항은 &lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#id1"&gt;Django 2.0 릴리스 노트의 사소한 수정 항목&lt;/a&gt;을 참고하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=""&gt;삭제된 기능&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django.dispatch.signals.Signal.disconnect()&lt;/code&gt;에서 사용하던  &lt;code&gt;weak&lt;/code&gt; 인자가 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django.db.backends.base.BaseDatabaseOperations.check_aggregate_support()&lt;/code&gt;가 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django.forms.extras&lt;/code&gt; 패키지가 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assignment_tag&lt;/code&gt; 헬퍼가 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ForeignKey&lt;/code&gt; 필드와 &lt;code&gt;OneToOneField&lt;/code&gt; 필드의 &lt;code&gt;on_delete&lt;/code&gt; 인자에 대해서도 마이그레이션이 필요합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django.db.models.fields.add_lazy_relation()&lt;/code&gt;이 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include()&lt;/code&gt; 메서드에 사용하던 &lt;code&gt;app_name&lt;/code&gt; 인자가 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;makemigrations&lt;/code&gt; 명령에서 사용하던 &lt;code&gt;--exit&lt;/code&gt; 옵션이 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shell&lt;/code&gt; 명령에서 사용하던 &lt;code&gt;--play&lt;/code&gt; 옵션이 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CommaSeparatedIntegerField&lt;/code&gt; 필드가 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django.core.urlresolvers&lt;/code&gt;  모듈은 &lt;code&gt;django.urls&lt;/code&gt; 모듈로 옮겨갑니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Context.has_key()&lt;/code&gt; 메서드가 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;MySQL의 &lt;code&gt;__search&lt;/code&gt; 룩업이 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;User.is_authenticated()&lt;/code&gt; 메서드와 &lt;code&gt;User.is_anonymous()&lt;/code&gt; 메서드가 사라집니다. 해당 속성을 사용하세요.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FileField&lt;/code&gt; 필드의 &lt;code&gt;get_directory_name()&lt;/code&gt; 메서드와 &lt;code&gt;get_filename()&lt;/code&gt; 메서드가 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;옛날 방식의 미들웨어 설정인 &lt;code&gt;settings.MIDDLEWARE_CLASSES&lt;/code&gt;가 삭제되었습니다.&lt;/li&gt;
&lt;li&gt;이 외의 삭제된 기능들은 &lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#features-removed-in-2-0"&gt;Django 2.0 릴리스 노트의 삭제된 기능 항목&lt;/a&gt;을 참고하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="onemorething"&gt;One More Thing!&lt;/h2&gt;
&lt;p&gt;Django 2.0 릴리스 노트에 언급되지는 않았지만, Django를 처음 실행했을 때 보여주는 화면이 예뻐졌습니다. :)&lt;br&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2017/12/django-intro.png" alt="Django 2.0 릴리스와 주요 변경 사항"&gt;&lt;/p&gt;
&lt;p&gt;재미 없는 &lt;code&gt;It Works!&lt;/code&gt; 문구 대신 예쁜 로켓을 보여주네요. 그럼, Django 2.0과 함께 즐거운 프로그래밍이 되시길 바랍니다.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Django 1.11 릴리스와 주요 변경 사항</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;사진 출처: &lt;a href="https://www.flickr.com/photos/28744631@N06/8593971219/"&gt;Pinkie Pie by Daniel Chang&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django 1.11이 드디어 출시되었습니다. 1.x에서는 마지막 버전인데요. 이 글에서는 Django 1.11에 추가된 기능과 바뀐점을 간략하게 알아보려 합니다. &lt;a href="https://docs.djangoproject.com/en/stable/releases/1.11/"&gt;Django 공식 릴리스 노트&lt;/a&gt;를 참고하였습니다. &lt;strong&gt;주의! 릴리스 노트를 모두 번역하지는 않았습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;하위 버전들의 보안 업데이트도 함께 올라왔습니다. &lt;a href="https://docs.djangoproject.com/en/dev/releases/1.10.7/"&gt;1.10.7&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/dev/releases/1.9.13/"&gt;1.9.&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;</description><link>http://raccoonyy.github.io/django-1-11-release-note-summary-korean/</link><guid isPermaLink="false">59815cfcdd47a80001bb9f0e</guid><category>Django</category><category>1.11</category><category>Django 1.11</category><category>릴리스 노트</category><dc:creator>raccoony</dc:creator><pubDate>Tue, 04 Apr 2017 23:20:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2017/04/django-1.11-pony.png" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://raccoonyy.github.io/content/images/2017/04/django-1.11-pony.png" alt="Django 1.11 릴리스와 주요 변경 사항"&gt;&lt;p&gt;사진 출처: &lt;a href="https://www.flickr.com/photos/28744631@N06/8593971219/"&gt;Pinkie Pie by Daniel Chang&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django 1.11이 드디어 출시되었습니다. 1.x에서는 마지막 버전인데요. 이 글에서는 Django 1.11에 추가된 기능과 바뀐점을 간략하게 알아보려 합니다. &lt;a href="https://docs.djangoproject.com/en/stable/releases/1.11/"&gt;Django 공식 릴리스 노트&lt;/a&gt;를 참고하였습니다. &lt;strong&gt;주의! 릴리스 노트를 모두 번역하지는 않았습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;하위 버전들의 보안 업데이트도 함께 올라왔습니다. &lt;a href="https://docs.djangoproject.com/en/dev/releases/1.10.7/"&gt;1.10.7&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/dev/releases/1.9.13/"&gt;1.9.13&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/dev/releases/1.8.18/"&gt;1.8.18&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2017-05-11 수정 내역&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/raccoonyy/raccoonyy.github.com/issues/1"&gt;shlee322 님의 제보&lt;/a&gt;로 include 태그와 관련된 내용을 수정하였습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=""&gt;파이썬 호환성&lt;/h1&gt;
&lt;p&gt;Django 1.11은 파이썬 &lt;strong&gt;2.7, 3.4, 3.5, 3.6에서 작동&lt;/strong&gt;합니다. 3.6을 지원하는 첫 Django 버전입니다. 각 버전별 마지막 릴리스를 사용하기를 추천합니다.&lt;/p&gt;
&lt;p&gt;Django 1.11.x는 파이썬 2를 지원하는 마지막 버전입니다. 다음 번 메이저 릴리스인 &lt;strong&gt;Django 2.0부터는 파이썬 3.5 이상만 지원&lt;/strong&gt;할 예정입니다.&lt;/p&gt;
&lt;h1 id=""&gt;새 기능&lt;/h1&gt;
&lt;h3 id="index"&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/indexes/#module-django.db.models.indexes"&gt;Index 클래스&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/topics/db/models/#meta-options"&gt;Meta 클래스&lt;/a&gt;의 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/options/#django.db.models.Options.indexes"&gt;indexes 항목에서 인덱스할 필드를 지정&lt;/a&gt;할 수 있고, 이를 위한 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/indexes/"&gt;Index 클래스&lt;/a&gt;도 추가되었습니다.&lt;/p&gt;
&lt;h3 id=""&gt;템플릿 기반의 폼 위젯 렌더링&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/forms/renderers/"&gt;폼 렌더링 API가 추가&lt;/a&gt;되었고, 이를 활용하여 특정 폼 위젯을 커스터마이징할 수 있습니다.&lt;/p&gt;
&lt;h3 id=""&gt;하위 쿼리 표현식&lt;/h3&gt;
&lt;p&gt;쿼리 결과를 다른 쿼리에서 참조할 수 있는 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/expressions/#subquery-expressions"&gt;Subquery 표현식&lt;/a&gt;과 쿼리 결과가 존재할 때만 실행할 수 있는 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/expressions/#django.db.models.Exists"&gt;Exists 표현식&lt;/a&gt;이 추가되었습니다.&lt;/p&gt;
&lt;h3 id=""&gt;자잘하게 추가된 기능&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/settings/#std:setting-CSRF_USE_SESSIONS"&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;을 설정&lt;/a&gt;하여 CSRF 토큰을 쿠키가 아닌 세션에 저장할 수 있습니다(기본 값은 False).&lt;/li&gt;
&lt;li&gt;PostgreSQL 하에서 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.iterator"&gt;&lt;code&gt;QuerySet.iterator()&lt;/code&gt; 메서드&lt;/a&gt;가 &lt;a href="http://initd.org/psycopg/docs/usage.html#server-side-cursors"&gt;서버 측 커서&lt;/a&gt;를 사용하여 서버의 메모리 부담을 데이터베이스 메모리로 돌릴 수 있습니다.&lt;/li&gt;
&lt;li&gt;Form에서 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/forms/api/#django.forms.Form.get_initial_for_field"&gt;&lt;code&gt;get_initial_for_field()&lt;/code&gt; 메서드&lt;/a&gt;를 사용하여, 필드의 초기 값을 지정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;loaddata 명령에 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/django-admin/#cmdoption-loaddata-exclude"&gt;--exclude 옵션이 추가&lt;/a&gt;되었습니다. 특정 모델이나 앱을 제외하고 픽스처 데이터를 불러올 수 있습니다.&lt;/li&gt;
&lt;li&gt;showmigrations 명령에서 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/django-admin/#cmdoption-showmigrations-plan"&gt;--plan 옵션&lt;/a&gt;을 사용할 때도 app_label을 지정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.get_or_create"&gt;&lt;code&gt;get_or_create()&lt;/code&gt; 메서드&lt;/a&gt;와 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.update_or_create"&gt;&lt;code&gt;update_or_create()&lt;/code&gt; 메서드&lt;/a&gt;에서 &lt;code&gt;defaults&lt;/code&gt;의 값으로 함수 값(callable value)을 지정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/database-functions/#django.db.models.functions.datetime.Trunc"&gt;DateTime이나 TimeField에 대해 Trunc 클래스를 적용&lt;/a&gt;하면, 특정 부분 이하를 자를 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 월 단위
2017-02-28 20:11:24.021458+09:00 =&amp;gt; 2017-01-01 00:00:00.000000+09:00

# 일 단위
2017-02-28 20:11:24.021458+09:00 =&amp;gt; 2017-02-01 00:00:00.000000+09:00

# 시 단위
2017-02-28 20:11:24.021458+09:00 =&amp;gt; 2017-02-28 00:00:00.000000+09:00
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;쿼리셋의 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.values"&gt;&lt;code&gt;values()&lt;/code&gt; 메서드&lt;/a&gt;와 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.values_list"&gt;&lt;code&gt;values_list()&lt;/code&gt; 메서드&lt;/a&gt;에서도 표현식을 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;쿼리 표현식에서 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/expressions/#django.db.models.Expression.asc"&gt;정렬시 null 값을 앞에 오거나 뒤에 오도록 지정&lt;/a&gt;할 수 있습니다.&lt;/li&gt;
&lt;li&gt;두 쿼리셋의 교집합과 합집합, 차집합을 만들 수 있는 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.union"&gt;&lt;code&gt;union()&lt;/code&gt; 메서드&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.intersection"&gt;&lt;code&gt;intersection()&lt;/code&gt; 메서드&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.difference"&gt;&lt;code&gt;difference()&lt;/code&gt; 메서드&lt;/a&gt;가 추가되었습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=""&gt;바뀐 점&lt;/h1&gt;
&lt;h3 id="collectstatic"&gt;collectstatic 실행시 파일 간 순환 참조가 존재하면 오류 발생&lt;/h3&gt;
&lt;p&gt;해시 값이 붙은 정적 파일 저장소를 사용하고 있을 때,&lt;br&gt;
&lt;code&gt;a.css&lt;/code&gt;에서 &lt;code&gt;b.css&lt;/code&gt;를 참조하고 &lt;code&gt;b.css&lt;/code&gt;에서도 &lt;code&gt;a.css&lt;/code&gt;를 참조한다면 collectstatic 명령이 실패합니다.&lt;/p&gt;
&lt;h3 id="datetimefield"&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.DateTimeField"&gt;DateTimeField&lt;/a&gt;에 대해 상세 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#date"&gt;룩업&lt;/a&gt; 지원&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.DateField"&gt;DateField&lt;/a&gt;에 대해 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#week"&gt;week&lt;/a&gt; 룩업을 지원합니다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.DateTimeField"&gt;DateTimeField&lt;/a&gt;에 대해 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#time"&gt;time&lt;/a&gt; 룩업을 지원합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_TZ&lt;/code&gt; 옵션이 &lt;code&gt;True&lt;/code&gt;라면 필드의 값이 현지 시각으로 바뀌어 리턴됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="postgresql92postgis20"&gt;PostgreSQL 9.2와 PostGIS 2.0 지원 중단&lt;/h3&gt;
&lt;p&gt;PostgreSQL 9.2의 지원이 2017년 9월에 끝남에 따라, Django 1.11에서는 &lt;strong&gt;PostgreSQL 9.3을 최소 지원 버전으로 지정&lt;/strong&gt;하였습니다.&lt;/p&gt;
&lt;h3 id="liveservertestcase0"&gt;LiveServerTestCase가 포트 0에 바인드&lt;/h3&gt;
&lt;p&gt;아울러 &lt;code&gt;DJANGO_LIVE_TEST_SERVER_ADDRESS&lt;/code&gt; 옵션이 사라지고, &lt;code&gt;manage.py test&lt;/code&gt; 명령에 &lt;code&gt;--liveserver&lt;/code&gt; 옵션도 삭제되었습니다.&lt;/p&gt;
&lt;h3 id="get_or_createupdate_or_create"&gt;&lt;code&gt;get_or_create()&lt;/code&gt;와 &lt;code&gt;update_or_create()&lt;/code&gt;에서 변수명 검사&lt;/h3&gt;
&lt;p&gt;모델에 없는 필드를 지정할 경우 오류가 발생합니다. (이전에는 그냥 무시했기 때문에, 타이핑 실수를 찾기가 어려웠죠.)&lt;/p&gt;
&lt;h3 id="pytztime_zonenone"&gt;pytz 패키지 의존성이 추가되었고, &lt;code&gt;TIME_ZONE = None&lt;/code&gt; 옵션이 사라집니다.&lt;/h3&gt;
&lt;p&gt;자동으로 타임존을 설정할 때는 settings 파일에 &lt;code&gt;TIME_ZONE = None&lt;/code&gt; 대신 다음처럼 하세요.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from tzlocal import get_localzone

TIME_ZONE = get_localzone().zone
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=""&gt;사소한 변경&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;테스트를 실행할 때도 &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;를 검사합니다. 테스트용 호스트 이름을 사용하고 있다면 이 이름을 &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;에도 넣어야 합니다.&lt;/li&gt;
&lt;li&gt;모델 폼에서 CharField가 null=True인 경우, 빈 문자열 대신 NULL을 저장합니다.&lt;/li&gt;
&lt;li&gt;체크박스와 셀렉트박스 폼을 렌더링할 때 &lt;code&gt;checked='checked'&lt;/code&gt;, &lt;code&gt;selected='selected'&lt;/code&gt; 대신 &lt;code&gt;checked&lt;/code&gt;, &lt;code&gt;selected&lt;/code&gt;만 넣습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=""&gt;삭제된 기능&lt;/h1&gt;
&lt;h3 id="modelspermalink"&gt;models.permalink 데코레이터&lt;/h3&gt;
&lt;p&gt;대신 &lt;a href="https://docs.djangoproject.com/en/1.11/ref/urlresolvers/#django.urls.reverse"&gt;&lt;code&gt;django.urls.reverse()&lt;/code&gt;&lt;/a&gt;를 사용해야 합니다.&lt;/p&gt;
&lt;h3 id="contribauth"&gt;contrib.auth의 각종 함수 기반 뷰&lt;/h3&gt;
&lt;p&gt;인증과 관련된 함수 기반 뷰들이 클래스 기반 뷰로 바뀌었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;login()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.LoginView"&gt;LoginView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logout()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.LogoutView"&gt;LogoutView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_change()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordChangeView"&gt;PasswordChangeView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_change_done()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordChangeDoneView"&gt;PasswordChangeDoneView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_reset()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordResetView"&gt;PasswordResetView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_reset_done()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordResetDoneView"&gt;PasswordResetDoneView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_reset_confirm()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordResetConfirmView"&gt;PasswordResetConfirmView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_reset_complete()&lt;/code&gt; -&amp;gt; &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordResetCompleteView"&gt;PasswordResetCompleteView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="include"&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordResetCompleteView"&gt;&lt;code&gt;{% include %}&lt;/code&gt; 탬플릿 태그&lt;/a&gt; 렌더링시 예외를 발생시키지 않았던 부분&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/templates/builtins/#std:templatetag-include"&gt;include&lt;/a&gt; 태그를 렌더링하는 동안 예외가 발생하면 조용히 넘어갔는데, 이것이 꽤나 혼란을 주었나 봅니다. Django 2.1부터는 include 태그를 사용했을 때 예외가 발생합니다.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Docker 1.13 릴리스 요약</title><description>1월 19일에 출시된 Docker 1.13에서 바뀐 점을 요약하였습니다. #1 swarm 실행시 compose 파일 사용 #2 데몬과 클라이언트 호환성 향상 #3 청소용 명령어 #4 명령어 구조 변경 #5 swarm 모니터링 개선 #6 빌드 개선 #7 AWS, Azure 지원(베타)</description><link>http://raccoonyy.github.io/whats-new-in-docker-1-13-korean/</link><guid isPermaLink="false">59815cfcdd47a80001bb9f0f</guid><category>docker</category><category>1.13</category><category>릴리스 노트</category><dc:creator>raccoony</dc:creator><pubDate>Fri, 20 Jan 2017 02:15:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2017/01/docker1-13.png" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;blockquote&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2017/01/docker1-13.png" alt="Docker 1.13 릴리스 요약"&gt;&lt;p&gt;1월 19일에 출시된 Docker 1.13에서 바뀐 점을 요약하였습니다. &lt;a href="https://blog.docker.com/2017/01/whats-new-in-docker-1-13/"&gt;Introducing Docker 1.13&lt;/a&gt;을 참고하였습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="1swarmcompose"&gt;1. swarm으로 클러스터를 띄울 때 compose 파일을 사용할 수 있습니다.&lt;/h3&gt;
&lt;p&gt;swarm으로 서비스를 관리할 때 옵션 지정하기가 번잡했던 부분을 해소할 수 있겠습니다.&lt;/p&gt;
&lt;h3 id="2"&gt;2. 예전 버전과의 호환성 유지&lt;/h3&gt;
&lt;p&gt;Docker 데몬보다 클라이언트가 최신 버전인 경우 &lt;code&gt;Error response from daemon: client is newer than server&lt;/code&gt; 에러를 만나곤 했는데요. 1.13 버전부터는 호환성이 유지된다고 합니다.&lt;/p&gt;
&lt;h3 id="3"&gt;3. 청소용 명령어 추가&lt;/h3&gt;
&lt;p&gt;많은 사람들이 원했던 두 명령어가 추가되었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker system df&lt;/code&gt;: 도커가 디스크 용량을 얼마나 차지하는지 알려줍니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-language-sh"&gt;$ docker system df
TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE
Images              85                  7                   8.59 GB             4.618 GB (53%)
Containers          9                   3                   407 MB              323.5 MB (79%)
Local Volumes       65                  6                   6.675 GB            5.968 GB (89%)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker system prune&lt;/code&gt;: 정지한 컨테이너, 연결이 끊긴 볼륨, 연결이 끊긴 네트워크, 외톨이(dangling) 이미지가 삭제됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-language-sh"&gt;$ docker system prune
WARNING! This will remove:
	- all stopped containers
	- all volumes not used by at least one container
	- all networks not used by at least one container
	- all dangling images
Are you sure you want to continue? [y/N]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="4"&gt;4. 명령어 구조 변경&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker container&lt;/code&gt;와 &lt;code&gt;docker image&lt;/code&gt; 등의 명령어 모음을 추가하면서 구조를 변경하고 있습니다. 예를 들어 &lt;code&gt;docker images&lt;/code&gt; 같은 명령어는 뜻이 더 분명해 보이는 &lt;code&gt;docker image list&lt;/code&gt;로도 실행할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker container&lt;/code&gt;: 컨테이너와 관련된 명령어가 들어 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ docker container
Commands:
  attach      Attach to a running container
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes on a container's filesystem
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  inspect     Display detailed information on one or more containers
  kill        Kill one or more running containers
  logs        Fetch the logs of a container
  ls          List containers
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  prune       Remove all stopped containers
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  run         Run a command in a new container
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  wait        Block until one or more containers stop, then print their exit codes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 중에 &lt;code&gt;docker container list&lt;/code&gt;만 실행을 해보면...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker container list
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
b769009a1693        raccoony/buster     &amp;quot;./run.sh&amp;quot;               3 hours ago         Up 2 hours          0.0.0.0:9000-&amp;gt;9000/tcp   blog_buster_1
5aeaf1187adc        ghost               &amp;quot;/entrypoint.sh np...&amp;quot;   3 hours ago         Up 2 hours          0.0.0.0:2368-&amp;gt;2368/tcp   blog_ghost_1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker image&lt;/code&gt;: 이미지와 관련된 명령어가 들어 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ docker image
Commands:
  build       Build an image from a Dockerfile
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Display detailed information on one or more images
  load        Load an image from a tar archive or STDIN
  ls          List images
  prune       Remove unused images
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rm          Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 중에 &lt;code&gt;docker image prune&lt;/code&gt;을 실행해보았습니다. 1.5GB를 아꼈네요. :)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker image prune
WARNING! This will remove all dangling images.
Are you sure you want to continue? [y/N] y
Deleted Images:
deleted: sha256:9e36c6055df2ada
...
Total reclaimed space: 1.579 GB
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="5swarm"&gt;5. swarm 모니터링 개선&lt;/h3&gt;
&lt;p&gt;swarm으로 실행한 클러스터들의 로그를 모아서 보여주는 &lt;code&gt;docker service logs&lt;/code&gt; 명령이 추가되었습니다.&lt;/p&gt;
&lt;h3 id="6"&gt;6. 빌드 개선&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker build&lt;/code&gt;를 실행할 때 &lt;code&gt;--squash&lt;/code&gt; 옵션을 추가하면, 겹겹이 쌓인 파일시스템 레이어를 하나로 합쳐줍니다. &lt;code&gt;--squash&lt;/code&gt;를 사용하면, 이미지 레이어를 최소화해서 얻는 장점도 있는 반면, 여러 이미지들이 공유하던 중간 레이어들을 공유할 수 없다는 단점도 생깁니다.&lt;/p&gt;
&lt;p&gt;또, &lt;code&gt;--compress&lt;/code&gt; 옵션도 추가되었습니다. 원격에 있는 데몬과 통신하면서 이미지를 빌드할 때, 오가는 데이터를 압축하여 빌드 속도를 높인다고 합니다.&lt;/p&gt;
&lt;h3 id="7awsazure"&gt;7. AWS, Azure 지원(베타)&lt;/h3&gt;
&lt;p&gt;AWS와 Azure에서 퍼블릭 베타 형태로 Docker를 지원합니다.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>파이썬 3.6에서 바뀐 점</title><description>파이썬 3.6에 추가된 기능과 개선 사항을 살펴봅니다. #1 f 문자열 포매팅 #2 타입 힌트 #3 숫자 값에 자릿수 표시용 _ 기호 사용 #4 async / await 활용도 증가 #5 secrets 라이브러리 등 </description><link>http://raccoonyy.github.io/whats-new-in-python-3-6-korean/</link><guid isPermaLink="false">59815cfcdd47a80001bb9f03</guid><category>python 3.6</category><category>파이썬 3.6</category><category>new features</category><category>새 기능</category><category>개선사항</category><category>python</category><category>파이썬</category><category>릴리스 노트</category><dc:creator>raccoony</dc:creator><pubDate>Fri, 23 Dec 2016 14:57:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2016/12/python-3.6-release.png" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;blockquote&gt;
&lt;img src="http://raccoonyy.github.io/content/images/2016/12/python-3.6-release.png" alt="파이썬 3.6에서 바뀐 점"&gt;&lt;p&gt;파이썬 3.6이 방금 전(12월 23일) 정식 출시되었습니다. 이 글에서는 파이썬 3.6에 추가된 문법과 바뀐점을 간략하게 알아보려 합니다. 파이썬 공식 문서의 &lt;a href="https://docs.python.org/3.6/whatsnew/3.6.html"&gt;What’s New In Python 3.6&lt;/a&gt;을 참고하였습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=""&gt;새 문법&lt;/h1&gt;
&lt;h3 id="1fpep498"&gt;1. f 문자열 포매팅(&lt;a href="https://www.python.org/dev/peps/pep-0498/"&gt;PEP 498&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.format()&lt;/code&gt; 메서드나 &lt;code&gt;%&lt;/code&gt;를 사용할 때 변수를 죽 늘어놓아야 했던 불편함을 덜 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; lang = 'Python'
&amp;gt;&amp;gt;&amp;gt; author = 'Guido van Rossum'

&amp;gt;&amp;gt;&amp;gt; 'Language: {}, Author: {}'.format(lang, author)
Language: Python, Author: Guido van Rossum
&amp;gt;&amp;gt;&amp;gt; f'Language: {lang}, Author: {author}'
Language: Python, Author: Guido van Rossum
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자세한 내용은 파이썬 공식 문서의 &lt;a href="https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings"&gt;2.4.3 Formatted string literals&lt;/a&gt;를 참고하세요.&lt;/p&gt;
&lt;p&gt;PyCharm에서는 기존 포매팅에서 우클릭하여 &lt;code&gt;Convert to f-string literal&lt;/code&gt;이라는 메뉴를 선택하면, f 문자열 포매팅으로 손쉽게 바꿀 수 있습니다. (&lt;a href="https://blog.jetbrains.com/pycharm/2016/12/python-3-6-a-quick-look/"&gt;PyCharm 블로그&lt;/a&gt; 참고)&lt;/p&gt;
&lt;h3 id="2pep484"&gt;2. 타입 힌트(&lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;3.5에서는 함수의 전달인자나 리턴 값에만 사용할 수 있었던 타입 힌팅을 변수에도 적용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;파이썬은 동적 언어이므로 타입 힌트가 오류 검출 수단으로 사용되는 건 아니지만, PyCharm 등의 서드파티에서 자동 완성시 타입 힌트가 나타나는 등의 방법으로 사용됩니다. (&lt;a href="https://blog.jetbrains.com/pycharm/2016/12/python-3-6-a-quick-look/"&gt;PyCharm 블로그&lt;/a&gt; 참고)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; value: str
&amp;gt;&amp;gt;&amp;gt; value = 'test str'
&amp;gt;&amp;gt;&amp;gt; value
'test str'
&amp;gt;&amp;gt;&amp;gt; value = 123
&amp;gt;&amp;gt;&amp;gt; value
123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자세한 내용은 파이썬 공식 문서의 &lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484 -- Type Hints&lt;/a&gt;를 참고하세요.&lt;/p&gt;
&lt;h3 id="3_pep515"&gt;3. 숫자 값에 &lt;code&gt;_&lt;/code&gt; 사용(&lt;a href="https://www.python.org/dev/peps/pep-0515"&gt;PEP 515&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;숫자 값에 밑줄(&lt;code&gt;_&lt;/code&gt;)을 사용할 수 있습니다. 숫자 값을 읽을 때 자릿수 세기의 불편함을 덜 수 있겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; 1000
1000
&amp;gt;&amp;gt;&amp;gt; 1_000
1000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사람이 직접 넣는 방식이 원시적으로 보인다면, 문자열 포매팅을 사용하면 되고요.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; value = 12345678
&amp;gt;&amp;gt;&amp;gt; f'{value:_}'
12_345_678
&amp;gt;&amp;gt;&amp;gt; '{:_}'.format(value)  # 기존 포매팅도 됩니다.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자세한 내용은 파이썬 공식 문서의 &lt;a href="https://www.python.org/dev/peps/pep-0515/"&gt;PEP 515 -- Underscores in Numeric Literals&lt;/a&gt;를 참고하세요.&lt;/p&gt;
&lt;h3 id="4asyncpep525"&gt;4. async 제너레이터(&lt;a href="https://www.python.org/dev/peps/pep-0525/"&gt;PEP 525&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;async / await 문법을 제너레이터에 사용할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;import asyncio
async def gen(x):
    for i in range(x):
        yield i
        await asyncio.sleep(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자세한 내용은 파이썬 공식 문서의 &lt;a href="https://www.python.org/dev/peps/pep-0525/"&gt;PEP 525 -- Asynchronous Generators&lt;/a&gt;를 참고하세요.&lt;/p&gt;
&lt;h3 id="5asyncpep530"&gt;5. async 축약(&lt;a href="https://www.python.org/dev/peps/pep-0530/"&gt;PEP 530&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;리스트 축약, dict 축약과 같은 문법에도 async / await를 사용할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# 4. async 제너레이터에서 이어서
result = [i async for i in aiter() if i % 2]

result = [await fun() for fun in funcs if await condition()]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자세한 내용은 파이썬 공식 문서의 &lt;a href="https://www.python.org/dev/peps/pep-0530/"&gt;PEP 530 -- Asynchronous Comprehensions&lt;/a&gt;를 참고하세요.&lt;/p&gt;
&lt;h3 id="6pep487"&gt;6. 클래스 정의 문법 단순화(&lt;a href="https://www.python.org/dev/peps/pep-0487/"&gt;PEP 487&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;부모 클래스에 &lt;code&gt;__init_subclass__&lt;/code&gt;를 정의하면, 상속 클래스 정의가 간단해 집니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;class BlogBase:
    def __init_subclass__(cls, name, **kwargs):
        cls.name = name
        super().__init_subclass__(**kwargs)

class Blog(BlogBase, name=&amp;quot;raccoony's cave&amp;quot;):
    pass

&amp;gt;&amp;gt;&amp;gt; Blog.name
&amp;quot;raccoony's cave&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자세한 내용은 파이썬 공식 문서의 &lt;a href="https://www.python.org/dev/peps/pep-0487/"&gt;PEP 487 -- Simpler customisation of class creation&lt;/a&gt;를 참고하세요.&lt;/p&gt;
&lt;h1 id=""&gt;새 라이브러리&lt;/h1&gt;
&lt;h3 id="secretspep506"&gt;secrets(&lt;a href="https://www.python.org/dev/peps/pep-0506"&gt;PEP 506&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;random보다 강화된 난수 생성 라이브러리가 추가되었습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; import secrets
&amp;gt;&amp;gt;&amp;gt; secrets.token_bytes(10)
b'\xf6!\x00w\r8\x89\xd7\x93\x80'
&amp;gt;&amp;gt;&amp;gt; secrets.token_hex(10)
'742ae68b333bc3d70048'
&amp;gt;&amp;gt;&amp;gt; secrets.token_urlsafe(10)
'UiT0E-HgthTMGQ'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자세한 내용은 파이썬 공식 문서의 &lt;a href="https://docs.python.org/3.6/library/secrets.html#module-secrets"&gt;secrets — Generate secure random numbers for managing secrets&lt;/a&gt;를 참고하세요.&lt;/p&gt;
&lt;h1 id=""&gt;개선 사항&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;dict 타입의 작동 방식이 개선되어, 3.5 버전 대비 20%~25% 정도 메모리가 절약됩니다. PyPy의 작동 방식을 채용했다네요. (&lt;a href="https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-compactdict"&gt;New dict implementation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;클래스에 정의한 속성들의 순서가 유지됩니다. (&lt;a href="https://www.python.org/dev/peps/pep-0520/"&gt;PEP 520&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;전달인자의 &lt;code&gt;**kwargs&lt;/code&gt;에 들어 있는 변수의 순서가 유지됩니다. (&lt;a href="https://www.python.org/dev/peps/pep-0468"&gt;PEP 468&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;이 외에도 3.6 업데이트와 관련된 자세한 내용은 파이썬 공식 문서의 &lt;a href="https://docs.python.org/3.6/whatsnew/3.6.html"&gt;What’s New In Python 3.6&lt;/a&gt;을 참고하세요.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Django 1.10 릴리스 노트 요약</title><description>Django 1.10 릴리스 노트를 요약하였습니다. #1 PostgreSQL에서 Full Text 검색 지원 #2 미들웨어 스타일 변경 #3 사용자 username에 유니코드 지원 등</description><link>http://raccoonyy.github.io/django-1-10-release-note-korean/</link><guid isPermaLink="false">59815cfcdd47a80001bb9ede</guid><category>Django</category><category>1.10</category><category>릴리스 노트</category><dc:creator>raccoony</dc:creator><pubDate>Tue, 02 Aug 2016 04:00:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2016/08/django_1-10_released.png" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://raccoonyy.github.io/content/images/2016/08/django_1-10_released.png" alt="Django 1.10 릴리스 노트 요약"&gt;&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/releases/1.10/"&gt;Django 1.10 릴리스 노트&lt;/a&gt;를 요약해 보았습니다.&lt;/p&gt;
&lt;p&gt;(제 주관이 많이 들어간 요약이므로, 원문도 꼭 챙겨보길 권합니다.)&lt;/p&gt;
&lt;h2 id=""&gt;파이썬 호환성&lt;/h2&gt;
&lt;p&gt;Django 1.9와 마찬가지로, 파이썬 2.7, 3.4, 3.5를 지원합니다.&lt;/p&gt;
&lt;h2 id=""&gt;새 기능&lt;/h2&gt;
&lt;h4 id="postgresqlfulltext"&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/releases/1.10/#full-text-search-for-postgresql"&gt;PostgreSQL에서 Full Text 검색을 지원&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; Entry.objects.filter(body_text__search='Cheese')
[&amp;lt;Entry: Cheese on Toast recipes&amp;gt;, &amp;lt;Entry: Pizza Recipes&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;기본 Full Text 검색 외에도 &lt;a href="https://docs.djangoproject.com/en/1.10/ref/contrib/postgres/search/#postgresql-fts-weighting-queries"&gt;가중치를 부여한 검색&lt;/a&gt; 등도 지원하니, PostgreSQL로 넘어갈 이유가 점점 많아지고 있네요.&lt;/p&gt;
&lt;h4 id="middleware_classesmiddleware"&gt;&lt;a href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-MIDDLEWARE"&gt;MIDDLEWARE_CLASSES 대신 MIDDLEWARE&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/releases/1.10/#new-style-middleware"&gt;업그레이드 가이드&lt;/a&gt;를 참고하세요.&lt;/p&gt;
&lt;h4 id="username"&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/releases/1.10/#official-support-for-unicode-usernames"&gt;유니코드 username 지원&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;파이썬 3에서는 &lt;code&gt;username_validator&lt;/code&gt;가 기본으로 유니코드를 지원하게 됩니다.&lt;/p&gt;
&lt;h2 id=""&gt;중단 예정인 기능&lt;/h2&gt;
&lt;h4 id="commaseparatedintegerfield"&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/releases/1.10/#commaseparatedintegerfield-model-field"&gt;CommaSeparatedIntegerField&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;대신, &lt;a href="https://docs.djangoproject.com/en/1.10/ref/validators/#django.core.validators.validate_comma_separated_integer_list"&gt;&lt;code&gt;validate_comma_separated_integer_list&lt;/code&gt;&lt;/a&gt;를 사용하라고 하네요.&lt;/p&gt;
&lt;h2 id=""&gt;삭제된 기능&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django.conf.urls.patterns()&lt;/code&gt;가 사라졌어요.&lt;/li&gt;
&lt;li&gt;별도로 설정 가능하던 템플릿 관련 설정들이 사라졌습니다. &lt;code&gt;TEMPLATES&lt;/code&gt; 설정 안에 넣어야 합니다.&lt;/li&gt;
&lt;li&gt;migrate 명령 실행시 &lt;code&gt;--list&lt;/code&gt; 옵션이 사라집니다. (migrate 명령 대신 showmigrations 명령을 사용하면 됩니다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title>Django 1.9 릴리스와 주요 변경 사항 소개</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;지난 12월 1일, Django 1.9 버전이 출시되었습니다.&lt;/p&gt;
&lt;h2 id=""&gt;파이썬 호환성&lt;/h2&gt;
&lt;p&gt;Django 1.9는 최소한 파이썬 2.7이 필요하며 파이썬 3.4와 3.5를 지원합니다.&lt;/p&gt;
&lt;h2 id=""&gt;새 기능&lt;/h2&gt;
&lt;h3 id="on_commit"&gt;on_commit() 훅&lt;/h3&gt;
&lt;p&gt;데이터베이스 트랜잭션이 성공한 시점을 인식하여 훅을 걸 수 있습니다. 알림용 이메일이나 태스크 큐 생성, 캐시 갱신(invalidating) 등을 용례로 언급했습니다.&lt;/p&gt;
&lt;p&gt;참고&lt;/p&gt;&lt;/div&gt;</description><link>http://raccoonyy.github.io/django-1-9-release-and-major-highlights/</link><guid isPermaLink="false">59815cfcdd47a80001bb9ebe</guid><category>Django</category><category>1.9</category><category>릴리스 노트</category><dc:creator>raccoony</dc:creator><pubDate>Tue, 08 Dec 2015 02:10:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2015/12/Screenshot-2015-12-08-10-41-46.png" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://raccoonyy.github.io/content/images/2015/12/Screenshot-2015-12-08-10-41-46.png" alt="Django 1.9 릴리스와 주요 변경 사항 소개"&gt;&lt;p&gt;지난 12월 1일, Django 1.9 버전이 출시되었습니다.&lt;/p&gt;
&lt;h2 id=""&gt;파이썬 호환성&lt;/h2&gt;
&lt;p&gt;Django 1.9는 최소한 파이썬 2.7이 필요하며 파이썬 3.4와 3.5를 지원합니다.&lt;/p&gt;
&lt;h2 id=""&gt;새 기능&lt;/h2&gt;
&lt;h3 id="on_commit"&gt;on_commit() 훅&lt;/h3&gt;
&lt;p&gt;데이터베이스 트랜잭션이 성공한 시점을 인식하여 훅을 걸 수 있습니다. 알림용 이메일이나 태스크 큐 생성, 캐시 갱신(invalidating) 등을 용례로 언급했습니다.&lt;/p&gt;
&lt;p&gt;참고 링크 : &lt;a href="https://docs.djangoproject.com/en/1.9/topics/db/transactions/#django.db.transaction.on_commit"&gt;https://docs.djangoproject.com/en/1.9/topics/db/transactions/#django.db.transaction.on_commit&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=""&gt;비밀번호 유효성 확인&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.9/ref/settings/#std:setting-AUTH_PASSWORD_VALIDATORS"&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt;라는 설정 값이 생겼습니다. 여기에 유효성 확인용 검사기(validator)를 플러그인처럼 추가하는 방식입니다.&lt;/p&gt;
&lt;p&gt;새 프로젝트를 생성하면 기본적으로 다음의 검사기들이 추가됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UserAttributeSimilarityValidator : 사용자의 아이디나 이메일 같은 속성들과 비슷한 비밀번호인지 검사&lt;/li&gt;
&lt;li&gt;MinimumLengthValidator : 비밀번호의 최소 길이보다 짧은지 검사&lt;/li&gt;
&lt;li&gt;CommonPasswordValidator : 흔한 문자열(password 같은)인지 검사&lt;/li&gt;
&lt;li&gt;NumericPasswordValidator : 숫자로만 구성되어 있는지 검사&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;참고 링크 : &lt;a href="https://docs.djangoproject.com/en/1.9/topics/auth/passwords/#password-validation"&gt;https://docs.djangoproject.com/en/1.9/topics/auth/passwords/#password-validation&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="permission"&gt;클래스 기반 뷰에 Permission 믹스인 적용&lt;/h3&gt;
&lt;p&gt;클래스 기반 뷰에서 접근 권한을 제어할 수 있도록 AccessMixin, LoginRequiredMixin, PermissionRequireMixin, UserPassesTestMixin 을 제공합니다. (&lt;a href="http://django-braces.readthedocs.org/en/latest/index.html"&gt;django-braces&lt;/a&gt; 프로젝트에서 영향을 받았다고 합니다.)&lt;/p&gt;
&lt;p&gt;참고 링크 : &lt;a href="https://docs.djangoproject.com/en/1.9/releases/1.9/#permission-mixins-for-class-based-views"&gt;https://docs.djangoproject.com/en/1.9/releases/1.9/#permission-mixins-for-class-based-views&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="admin"&gt;관리자(admin) 페이지 리뉴얼&lt;/h3&gt;
&lt;p&gt;기능은 막강했지만 인터페이스가 너무 단조로웠던 관리자 페이지가 새 옷을 입었습니다. 플랫한 디자인을 적용했고 아이콘이 SVG 형태로 바뀌어서 HiDPI 스크린에서도 깔끔하게 보이지만, 아쉽게도 모바일 지원은 아직입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://raccoonyy.github.io/content/images/2015/12/Screenshot-2015-12-08-11-01-18.png" alt="Django 1.9 릴리스와 주요 변경 사항 소개"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://raccoonyy.github.io/content/images/2015/12/Screenshot-2015-12-08-11-00-19.png" alt="Django 1.9 릴리스와 주요 변경 사항 소개"&gt;&lt;/p&gt;
&lt;h3 id=""&gt;병렬 테스트&lt;/h3&gt;
&lt;p&gt;테스트시 &lt;code&gt;--parallel&lt;/code&gt; 옵션을 추가하면 병렬로 실행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;참고 링크 : &lt;a href="https://docs.djangoproject.com/en/1.9/ref/django-admin/#django-admin-option---parallel"&gt;https://docs.djangoproject.com/en/1.9/ref/django-admin/#django-admin-option---parallel&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=""&gt;과거 버전과 향후 지원&lt;/h2&gt;
&lt;p&gt;이번에 출시된 1.9 버전은 2017년 4월까지 업데이트가 지속됩니다. (2017년 4월에 1.11 버전이 출시 예정입니다.)&lt;/p&gt;
&lt;p&gt;1.8은 LTS 버전이므로 2018년 4월까지 업데이트가 지속됩니다.&lt;/p&gt;
&lt;p&gt;1.7 버전은 1.7.11을 마지막으로 업데이트가 되지 않겠습니다.&lt;/p&gt;
&lt;p&gt;다음 번 메이저 업데이트는 1.10 버전이며 2016년 8월에 출시될 예정입니다.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss></html>