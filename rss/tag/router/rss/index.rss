<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Router - raccoony's cave</title><description>Raccoony writes about programming, book and etc.</description><link>http://raccoonyy.github.io/</link><image><url>http://raccoonyy.github.io/favicon.png</url><title>Router - raccoony's cave</title><link>http://raccoonyy.github.io/</link></image><generator>Ghost 2.19</generator><lastBuildDate>Tue, 09 Apr 2019 21:39:52 GMT</lastBuildDate><atom:link href="http://raccoonyy.github.io/tag/router/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>DRF3 튜토리얼 6 - 뷰셋과 라우터</title><description>(django-rest-framework 공식 문서를 번역함) django rest framework가 제공하는 뷰셋을 사용하여, 지금까지 만든 뷰들을 리팩터링합니다. 자주 작성해야 하는 코드들이 굉장히 간단해 집니다.</description><link>http://raccoonyy.github.io/drf3-tutorial-6/</link><guid isPermaLink="false">59815cfbdd47a80001bb9ea0</guid><category>django rest framework 3</category><category>DRF3</category><category>translate</category><category>Router</category><category>ViewSet</category><category>Django</category><dc:creator>raccoony</dc:creator><pubDate>Wed, 11 Mar 2015 05:02:00 GMT</pubDate><media:content url="http://raccoonyy.github.io/content/images/2015/12/drf-logo.png" medium="image"/><content:encoded>&lt;img src="http://raccoonyy.github.io/content/images/2015/12/drf-logo.png" alt="DRF3 튜토리얼 6 - 뷰셋과 라우터"&gt;&lt;p&gt;원문 - &lt;a href="http://www.django-rest-framework.org/tutorial/6-viewsets-and-routers"&gt;Viewsets and Routers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;번역을 허락해 준 &lt;a href="https://twitter.com/_tomchristie"&gt;Tom Christie&lt;/a&gt;에게 고마움을 전합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="6"&gt;튜토리얼 6: 뷰셋 &amp;amp; 라우터&lt;/h1&gt;
&lt;p&gt;REST 프레임워크는 &lt;code&gt;ViewSets&lt;/code&gt;이라는 추상 클래스를 제공합니다. 이를 통해 개발자는 API의 상호작용이나 상태별 모델링에 집중할 수 있고, URL 구조는 기본 관례에 따라 자동으로 설정됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ViewSet&lt;/code&gt; 클래스는 &lt;code&gt;View&lt;/code&gt; 클래스와 거의 비슷하지만, &lt;code&gt;get&lt;/code&gt;과 &lt;code&gt;put&lt;/code&gt; 메서드는 지원하지 않고 &lt;code&gt;read&lt;/code&gt;와 &lt;code&gt;update&lt;/code&gt; 메서드를 지원합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ViewSet&lt;/code&gt; 클래스는 따지고 보면, 앞 장에서 만든 핸들러 메서드가 실제 뷰로 구체화될 때 이를 연결해주기만 합니다. 이때 보통은 &lt;code&gt;Router&lt;/code&gt; 클래스를 사용하여 복잡한 URL 설정을 처리합니다.&lt;/p&gt;
&lt;h2 id=""&gt;뷰셋을 사용하여 리팩터링하기&lt;/h2&gt;
&lt;p&gt;지금까지 만든 뷰들을 살펴보면서 뷰셋을 사용해서 리팩터링을 해봅시다.&lt;/p&gt;
&lt;p&gt;가장 먼저 리팩터링할 뷰는 &lt;code&gt;UserList&lt;/code&gt;와 &lt;code&gt;UserDetail&lt;/code&gt; 뷰입니다. &lt;code&gt;UserViewSet&lt;/code&gt; 하나로 모아보죠. 두 뷰의 코드를 삭제한 다음 아래의 클래스 하나를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from rest_framework import viewsets

class UserViewSet(viewsets.ReadOnlyModelViewSet):
    &amp;quot;&amp;quot;&amp;quot;
    이 뷰셋은 `list`와 `detail` 기능을 자동으로 지원합니다
    &amp;quot;&amp;quot;&amp;quot;
    queryset = User.objects.all()
    serializer_class = UserSerializer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 사용한 &lt;code&gt;ReadOnlyModelViewSet&lt;/code&gt; 클래스는 '읽기 전용' 기능을 자동으로 지원합니다. &lt;code&gt;queryset&lt;/code&gt;과 &lt;code&gt;serializer_class&lt;/code&gt; 속성은 여전히 설정을 해야 하지만, 두 개의 클래스에 중복으로 설정할 필요는 없어졌습니다.&lt;/p&gt;
&lt;p&gt;다음으로는 &lt;code&gt;SnippetList&lt;/code&gt;와 &lt;code&gt;SnippetDetail&lt;/code&gt;, &lt;code&gt;SnippetHighlight&lt;/code&gt; 뷰를 리팩터링해보죠. 이 뷰들을 삭제하고, 아래의 클래스를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from rest_framework.decorators import detail_route

class SnippetViewSet(viewsets.ModelViewSet):
    &amp;quot;&amp;quot;&amp;quot;
    이 뷰셋은 `list`와 `create`, `retrieve`, `update`, 'destroy` 기능을 자동으로 지원합니다

	여기에 `highlight` 기능의 코드만 추가로 작성했습니다
    &amp;quot;&amp;quot;&amp;quot;
    queryset = Snippet.objects.all()
    serializer_class = SnippetSerializer
    permission_classes = (permissions.IsAuthenticatedOrReadOnly,
                          IsOwnerOrReadOnly,)

    @detail_route(renderer_classes=[renderers.StaticHTMLRenderer])
    def highlight(self, request, *args, **kwargs):
        snippet = self.get_object()
        return Response(snippet.highlighted)

    def perform_create(self, serializer):
            serializer.save(owner=self.request.user)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에는 읽기 기능과 쓰기 기능을 모두 지원하기 위해 &lt;code&gt;ModelViewSet&lt;/code&gt; 클래스를 사용했습니다.&lt;/p&gt;
&lt;p&gt;추가한 &lt;code&gt;highlight&lt;/code&gt; 기능에는 여전히 &lt;code&gt;@detail_route&lt;/code&gt; 데코레이터를 사용했습니다. 이 데코레이터는 &lt;code&gt;create&lt;/code&gt;나 &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;에 해당하지 않는 기능에 대해 사용하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@detail_route&lt;/code&gt; 데코레이터를 사용한 기능은 기본적으로 &lt;code&gt;GET&lt;/code&gt; 요청에 응답합니다. &lt;code&gt;methods&lt;/code&gt; 인자를 설정하면 &lt;code&gt;POST&lt;/code&gt; 요청에도 응답할 수 있습니다.&lt;/p&gt;
&lt;p&gt;추가 기능의 URL은 기본적으로 메서드 이름과 같습니다. 이를 변경하고 싶다면 데코레이터에 &lt;code&gt;url_path&lt;/code&gt; 인자를 설정하면 됩니다.&lt;/p&gt;
&lt;h2 id=""&gt;뷰셋과 주소를 명시적으로 연결하기&lt;/h2&gt;
&lt;p&gt;핸들러 메서드는 단지 URL 설정과 연결하는 기능만 담당합니다. 물 밑에서 어떤 일들이 벌어지는지 알아보고자, 여기서는 먼저 뷰셋의 뷰들을 명시적으로 적어보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt; 파일에서 &lt;code&gt;ViewSet&lt;/code&gt; 클래스를 실제 뷰(concrete view)와 연결합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from snippets.views import SnippetViewSet, UserViewSet, api_root
from rest_framework import renderers

snippet_list = SnippetViewSet.as_view({
    'get': 'list',
    'post': 'create'
})
snippet_detail = SnippetViewSet.as_view({
    'get': 'retrieve',
    'put': 'update',
    'patch': 'partial_update',
    'delete': 'destroy'
})
snippet_highlight = SnippetViewSet.as_view({
    'get': 'highlight'
}, renderer_classes=[renderers.StaticHTMLRenderer])
user_list = UserViewSet.as_view({
    'get': 'list'
})
user_detail = UserViewSet.as_view({
    'get': 'retrieve'
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ViewSet&lt;/code&gt; 클래스의 뷰들을 HTTP 메서드에 따라 어떻게 실제 뷰와 연결했는지 살펴보세요.&lt;/p&gt;
&lt;p&gt;이제 실제 뷰와 URL을 연결해보겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;urlpatterns = format_suffix_patterns([
    url(r'^$', api_root),
    url(r'^snippets/$', snippet_list, name='snippet-list'),
    url(r'^snippets/(?P&amp;lt;pk&amp;gt;[0-9]+)/$', snippet_detail, name='snippet-detail'),
    url(r'^snippets/(?P&amp;lt;pk&amp;gt;[0-9]+)/highlight/$', snippet_highlight, name='snippet-highlight'),
    url(r'^users/$', user_list, name='user-list'),
    url(r'^users/(?P&amp;lt;pk&amp;gt;[0-9]+)/$', user_detail, name='user-detail')
])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;라우터 사용하기&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;View&lt;/code&gt; 클래스 대신 &lt;code&gt;ViewSet&lt;/code&gt; 클래스를 사용했기 때문에, 이제는 URL도 설정할 필요가 없습니다. &lt;code&gt;Router&lt;/code&gt; 클래스를 사용하면 뷰 코드와 뷰, URL이 관례적으로 자동 연결됩니다. 단지 뷰를 라우터에 적절히 등록해주기만 하면 됩니다. 그러면 REST 프레임워크가 알아서 다 합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt; 파일을 다음과 같이 고쳐보죠.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from django.conf.urls import url, include
from snippets import views
from rest_framework.routers import DefaultRouter

# 라우터를 생성하고 뷰셋을 등록합니다
router = DefaultRouter()
router.register(r'snippets', views.SnippetViewSet)
router.register(r'users', views.UserViewSet)

# 이제 API URL을 라우터가 자동으로 인식합니다
# 추가로 탐색 가능한 API를 구현하기 위해 로그인에 사용할 URL은 직접 설정을 했습니다
urlpatterns = [
    url(r'^', include(router.urls)),
    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;라우터에 뷰셋을 등록하는 일은 url 패턴 설정하기와 비슷합니다. 여기서는 두 개를 등록했는데요. 뷰들에 사용할 URL의 접두어와 뷰셋입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DefaultRouter&lt;/code&gt; 클래스는 API의 최상단 뷰를 자동으로 생성해주므로, &lt;code&gt;views&lt;/code&gt; 모듈에 있는 &lt;code&gt;api_root&lt;/code&gt; 메서드와 연결했던 URL도 삭제하였습니다.&lt;/p&gt;
&lt;h2 id=""&gt;뷰? 뷰셋? 장단점 비교하기&lt;/h2&gt;
&lt;p&gt;뷰셋은 유용한 추상화입니다. API 전반에 걸쳐 일관적인 URL 관례를 구현할 수 있고 작성할 코드 양은 최소한으로 유지할 수 있어서, URL 설정에 낭비될 정성을 API의 상호작용과 표현 자체에 쏟을 수 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 이것이 항상 옳다는 뜻은 아닙니다. 클래스 기반 뷰와 함수 기반 뷰에 각각 장단점이 있듯이 말이죠. 뷰셋을 사용하면 명확함이 좀 약해집니다.&lt;/p&gt;
&lt;h2 id=""&gt;회고&lt;/h2&gt;
&lt;p&gt;정말 적은 양의 코드만으로 pastebin과 같은 웹 API를 구현했습니다. 이 API는 웹 브라우저를 완벽히 지원하고, 인증 기능도 있고, 오브젝트별로 권한도 설정되며 다양한 형태로 렌더링됩니다.&lt;/p&gt;
&lt;p&gt;지금까지 기본 Django 뷰에서 시작하여 기능들을 점진적으로 만드는 설계 과정을 차근차근 살펴보았습니다.&lt;/p&gt;
&lt;p&gt;최종 코드는 &lt;a href="https://github.com/tomchristie/rest-framework-tutorial"&gt;GitHub&lt;/a&gt;에서 볼 수 있고, &lt;a href="http://restframework.herokuapp.com/"&gt;라이브 데모&lt;/a&gt;에서 작동 모습을 확인할 수도 있습니다.&lt;/p&gt;
&lt;h2 id=""&gt;더 많은 것들&lt;/h2&gt;
&lt;p&gt;이제 튜토리얼이 끝났습니다. REST 프레임워크에 대해 더 알고 싶다면 다음 링크들로 시작하면 좋을 겁니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tomchristie/django-rest-framework"&gt;GitHub&lt;/a&gt;에서 이슈를 등록하거나 리뷰하고, pull requests를 작성해 보세요.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/?fromgroups#!forum/django-rest-framework"&gt;REST 프레임워크 사용자 모임&lt;/a&gt;에 가입해서 활동해 보세요.&lt;/li&gt;
&lt;li&gt;창시자의 &lt;a href="https://twitter.com/_tomchristie"&gt;트위터&lt;/a&gt;를 팔로우하고 인사를 나누세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;이제 멋진 무언가를 만들어 보세요.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;번역에 도움을 주신 목돌님과 조청님께 감사합니다.&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item></channel></rss></html>