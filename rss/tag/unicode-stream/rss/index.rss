<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>unicode-stream - raccoony's cave</title><description>Raccoony writes about programming, book and etc.</description><link>http://raccoonyy.github.io/</link><image><url>http://raccoonyy.github.io/favicon.png</url><title>unicode-stream - raccoony's cave</title><link>http://raccoonyy.github.io/</link></image><generator>Ghost 1.21</generator><lastBuildDate>Wed, 28 Mar 2018 00:18:33 GMT</lastBuildDate><atom:link href="http://raccoonyy.github.io/tag/unicode-stream/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>파이썬에서 유니코드 스트림 다루기</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;원문 - &lt;a href="http://blog.etianen.com/blog/2013/10/05/python-unicode-streams/"&gt;Working with unicode streams in Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;번역을 허락해 준 Dave Hall 님께 고마움을 전합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;파이썬에서 유니코드를 다룰 때는 일반적으로 &lt;code&gt;str.decode()&lt;/code&gt;와 &lt;code&gt;unicode.encode()&lt;/code&gt; 메서드를 사용하여 &lt;code&gt;unicode&lt;/code&gt; 타입과 &lt;code&gt;str&lt;/code&gt; 타입을 상호 변환한다.&lt;/p&gt;
&lt;p&gt;아래 예시에서는 'utf-16'으로 작성된 파일을 열어, 수직 탭(vertical tab) 코드포인트를 지운 다음, 'utf-8'로 저장한다. (깨진&lt;/p&gt;&lt;/div&gt;</description><link>http://raccoonyy.github.io/working-with-unicode-streams-in-python-korean/</link><guid isPermaLink="false">59815cfbdd47a80001bb9ea2</guid><category>translate</category><category>unicode-stream</category><category>python</category><dc:creator>raccoony</dc:creator><pubDate>Mon, 16 Mar 2015 01:11:00 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;원문 - &lt;a href="http://blog.etianen.com/blog/2013/10/05/python-unicode-streams/"&gt;Working with unicode streams in Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;번역을 허락해 준 Dave Hall 님께 고마움을 전합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;파이썬에서 유니코드를 다룰 때는 일반적으로 &lt;code&gt;str.decode()&lt;/code&gt;와 &lt;code&gt;unicode.encode()&lt;/code&gt; 메서드를 사용하여 &lt;code&gt;unicode&lt;/code&gt; 타입과 &lt;code&gt;str&lt;/code&gt; 타입을 상호 변환한다.&lt;/p&gt;
&lt;p&gt;아래 예시에서는 'utf-16'으로 작성된 파일을 열어, 수직 탭(vertical tab) 코드포인트를 지운 다음, 'utf-8'로 저장한다. (깨진 XML을 다룰 때 이 방식이 매우 중요하다.)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# 파일 내용을 읽는다
with open(&amp;quot;input.txt&amp;quot;, &amp;quot;rb&amp;quot;) as input:
    data = input.read()

# 바이너리 데이터를 utf-16으로 디코딩한다
data = data.decode(&amp;quot;utf-16&amp;quot;)

# 수직 탭을 삭제한다
data = data.replace(u&amp;quot;\u000B&amp;quot;, u&amp;quot;&amp;quot;)

# 유니코드 데이터를 utf-8로 인코딩한다
data = data.encode(&amp;quot;utf-8&amp;quot;)

# 데이터를 utf-8로 저장한다
with open(&amp;quot;output.txt&amp;quot;, &amp;quot;wb&amp;quot;) as output:
    output.write(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;엄청나게 큰 파일을 다룰 때가 아니라면 이 정도로도 충분하다. 하지만 큰 파일을 다룰 땐 모든 데이터가 메모리에 올라간다는 사실이 문제가 된다.&lt;/p&gt;
&lt;h2 id=""&gt;스트리밍 인코더/디코더 사용하기&lt;/h2&gt;
&lt;p&gt;파이썬 기본 라이브러리에는 &lt;code&gt;codecs&lt;/code&gt; 모듈이 포함되어 있다. 이 모듈을 사용하면 파일을 조금씩 읽을 수 있고, 메모리에도 약간의 유니코드 데이터만 올라가게 된다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;codecs.open()&lt;/code&gt; 헬퍼 메서드를 사용하여 위의 예시를 최소한만 고쳐보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;import codecs

# 입력 스트림과 출력 스트림을 연다
input = codecs.open(&amp;quot;input.txt&amp;quot;, &amp;quot;rb&amp;quot;, encoding=&amp;quot;utf-16&amp;quot;)
output = codecs.open(&amp;quot;output.txt&amp;quot;, &amp;quot;wb&amp;quot;, encoding=&amp;quot;utf-8&amp;quot;)

# 유니코드 데이터 조각들을 스트리밍한다
with input, output:
    while True:
        # 데이터 조각을 읽고
        chunk = input.read(4096)
        if not chunk:
            break
        # 수직 탭을 삭제한다
        chunk = chunk.replace(u&amp;quot;\u000B&amp;quot;, u&amp;quot;&amp;quot;)
        # 데이터 조각을 쓴다
        output.write(chunk)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=""&gt;파일은 끔찍해! 이터레이터 사용하기&lt;/h2&gt;
&lt;p&gt;파일은 다루기가 좀 지루하다. 복잡한 처리 과정에는 유니코드 데이터의 이터레이터를 다루는 편이 깔끔할 것이다.&lt;/p&gt;
&lt;p&gt;아래는 &lt;code&gt;iterdecode()&lt;/code&gt;를 사용하여, 파일을 유니코드 데이터 조각의 이터레이터로 읽는 효과적인 방법이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from functools import partial
from codecs import iterdecode

# 특정 path의 파일을 유니코드 조각의 이터레이터로 리턴한다
def iter_unicode_chunks(path, encoding):
    # 읽을 파일을 연다
    with open(path, &amp;quot;rb&amp;quot;) as input:
        # 바이너리 파일을 바이너리 조각으로 변환한다
        binary_chunks = iter(partial(input.read, 1), &amp;quot;&amp;quot;)
        # 바이너리 조각을 유니코드 조각으로 변환한다
        for unicode_chunk in iterdecode(binary_chunks, encoding):
            yield unicode_chunk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 &lt;code&gt;iterencode()&lt;/code&gt; 메서드를 사용하여, 유니코드 조각의 이터레이터를 파일에 써보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from codecs import iterencode

# 유니코드 조각의 이터레이터를 특정 path의 파일에 쓴다
def write_unicode_chunks(path, unicode_chunks, encoding):
    # 쓸 파일을 연다
    with open(path, &amp;quot;wb&amp;quot;) as output:
        # 유니코드 조각을 바이너리로 변환한다
        for binary_chunk in iterencode(unicode_chunks, encoding):
            output.write(binary_chunk)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 두 함수와 함께 유니코드 데이터의 스트림에서 수직 탭을 없애는 일이 마법 같이 끝난다(just becomes a case of plumbing everything together).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# 파일을 유니코드 조각 형태로 읽는다
unicode_chunks = iter_unicode_chunks(&amp;quot;input.txt&amp;quot;, encoding=&amp;quot;utf-16&amp;quot;)

# 유니코드 조각을 수정한다
unicode_chunks = (
    chunk.replace(u&amp;quot;\u000B&amp;quot;, u&amp;quot;&amp;quot;)
    for chunk
    in unicode_chunks
)

# 유니코드 조각을 파일에 저장한다
write_unicode_chunks(&amp;quot;output.txt&amp;quot;, unicode_chunks, encoding=&amp;quot;utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="codecs"&gt;거창하게 &lt;code&gt;codecs&lt;/code&gt; 모듈을 사용해야 할까?&lt;/h2&gt;
&lt;p&gt;얼핏 그냥, &lt;code&gt;str.decode()&lt;/code&gt;와 &lt;code&gt;unicode.encode()&lt;/code&gt; 메서드를 사용하여 큰 &lt;code&gt;file&lt;/code&gt; 객체를 바이너리 조각으로 읽고, 인코딩하고 디코딩하는 편이 간단하다고 생각할 수도 있겠다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# 나쁜 예시. 이렇게 하지 마시오!

# 입력 스트림과 출력 스트림을 연다
with open(&amp;quot;input.txt&amp;quot;, &amp;quot;rb&amp;quot;) as input, open(&amp;quot;output.txt&amp;quot;, &amp;quot;wb&amp;quot;) as output:
    # 바이너리 데이터 조각들을 순회한다
    while True:
        # 데이터 조각을 읽는다
        chunk = input.read(4096)
        if not chunk:
            break
        # 위험: 바이너리 데이터를 utf-16으로 디코딩한다
        chunk = chunk.decode(&amp;quot;utf-16&amp;quot;)
        # 수직 탭을 삭제한다
        chunk = chunk.replace(u&amp;quot;\u000B&amp;quot;, u&amp;quot;&amp;quot;)
        # 유니코드 데이터를 utf-8로 인코딩한다
        chunk = chunk.encode(&amp;quot;utf-8&amp;quot;)
        # 데이터 조각을 쓴다
        output.write(chunk)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;불행히도 몇몇 유니코드 코드포인트는 바이너리 데이터의 한 바이트 이상으로 인코딩된다. 따라서 단순히 파일에서 바이트 조각들을 읽어서 &lt;code&gt;decode()&lt;/code&gt; 메서드를 적용하면 예기치 않게 &lt;code&gt;UnicodeDecodeError&lt;/code&gt;가 발생할 수도 있다. 이는 바이트 한 조각이 여러 바이트의 코드포인트로 분리되었기 때문이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;codecs&lt;/code&gt; 모듈의 도구들을 사용하면 이러한 예기치 않은 충돌을 예방할 수 있다.&lt;/p&gt;
&lt;h2 id="3"&gt;파이썬 3에서는?&lt;/h2&gt;
&lt;p&gt;파이썬 3에서는 훨씬 단순하게 유니코드 파일을 다룰 수 있다. 빌트인 메서드인 &lt;code&gt;open()&lt;/code&gt;은 유니코드 데이터를 수정하거나 인코딩을 변경하는 데 필요한 기능을 포함하고 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# 입력 스트림과 출력 스트림을 연다
input = open(&amp;quot;input.txt&amp;quot;, &amp;quot;rt&amp;quot;, encoding=&amp;quot;utf-16&amp;quot;)
output = open(&amp;quot;output.txt&amp;quot;, &amp;quot;wt&amp;quot;, encoding=&amp;quot;utf-8&amp;quot;)

# 유니코드 데이터 조각들을 스트리밍한다
with input, output:
    while True:
        # 데이터 조각을 읽고
        chunk = input.read(4096)
        if not chunk:
            break
        # 수직 탭을 삭제한다
        chunk = chunk.replace(&amp;quot;\u000B&amp;quot;, &amp;quot;&amp;quot;)
        # 데이터 조각을 쓴다
        output.write(chunk)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;파이썬 3의 시대다! 즐겁게 코딩하길!&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss></html>